<?php
/**
 * FuseApi
 * PHP version 7.4
 *
 * @category Class
 * @package  FuseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fuse
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FuseClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FuseClient\ApiException;
use FuseClient\Configuration;
use FuseClient\HeaderSelector;
use FuseClient\ObjectSerializer;

/**
 * FuseApi Class Doc Comment
 *
 * @category Class
 * @package  FuseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FuseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addAccountEvents' => [
            'application/json',
        ],
        'createAssetReport' => [
            'application/json',
        ],
        'createConsumerRiskReport' => [
            'application/json',
        ],
        'createConsumerRiskReportCustomization' => [
            'application/json',
        ],
        'createLinkToken' => [
            'application/json',
        ],
        'createSession' => [
            'application/json',
        ],
        'deleteFinancialConnection' => [
            'application/json',
        ],
        'enrichTransactions' => [
            'application/json',
        ],
        'exchangeFinancialConnectionsPublicToken' => [
            'application/json',
        ],
        'getAssetReport' => [
            'application/json',
        ],
        'getConsumerRiskReport' => [
            'application/json',
        ],
        'getEntity' => [
            'application/json',
        ],
        'getFinanceScore' => [
            'application/json',
        ],
        'getFinancialConnection' => [
            'application/json',
        ],
        'getFinancialConnectionsAccountDetails' => [
            'application/json',
        ],
        'getFinancialConnectionsAccountStatement' => [
            'application/json',
        ],
        'getFinancialConnectionsAccounts' => [
            'application/json',
        ],
        'getFinancialConnectionsBalances' => [
            'application/json',
        ],
        'getFinancialConnectionsOwners' => [
            'application/json',
        ],
        'getFinancialConnectionsTransactions' => [
            'application/json',
        ],
        'getFinancialInstitution' => [
            'application/json',
        ],
        'getInvestmentHoldings' => [
            'application/json',
        ],
        'getInvestmentTransactions' => [
            'application/json',
        ],
        'migrateFinancialConnection' => [
            'application/json',
        ],
        'refreshAssetReport' => [
            'application/json',
        ],
        'syncFinancialConnectionsData' => [
            'application/json',
        ],
        'updateConsumerRiskReportCustomization' => [
            'application/json',
        ],
        'v1FinancialConnectionsLiabilitiesPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addAccountEvents
     *
     * @param  string $account_id account_id (required)
     * @param  \FuseClient\Model\AddAccountEventsRequest $add_account_events_request add_account_events_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAccountEvents'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\AddAccountEventsResponse
     */
    public function addAccountEvents($account_id, $add_account_events_request = null, string $contentType = self::contentTypes['addAccountEvents'][0])
    {
        list($response) = $this->addAccountEventsWithHttpInfo($account_id, $add_account_events_request, $contentType);
        return $response;
    }

    /**
     * Operation addAccountEventsWithHttpInfo
     *
     * @param  string $account_id (required)
     * @param  \FuseClient\Model\AddAccountEventsRequest $add_account_events_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAccountEvents'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\AddAccountEventsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAccountEventsWithHttpInfo($account_id, $add_account_events_request = null, string $contentType = self::contentTypes['addAccountEvents'][0])
    {
        $request = $this->addAccountEventsRequest($account_id, $add_account_events_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\AddAccountEventsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\AddAccountEventsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\AddAccountEventsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\AddAccountEventsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\AddAccountEventsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAccountEventsAsync
     *
     * @param  string $account_id (required)
     * @param  \FuseClient\Model\AddAccountEventsRequest $add_account_events_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAccountEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAccountEventsAsync($account_id, $add_account_events_request = null, string $contentType = self::contentTypes['addAccountEvents'][0])
    {
        return $this->addAccountEventsAsyncWithHttpInfo($account_id, $add_account_events_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAccountEventsAsyncWithHttpInfo
     *
     * @param  string $account_id (required)
     * @param  \FuseClient\Model\AddAccountEventsRequest $add_account_events_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAccountEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAccountEventsAsyncWithHttpInfo($account_id, $add_account_events_request = null, string $contentType = self::contentTypes['addAccountEvents'][0])
    {
        $returnType = '\FuseClient\Model\AddAccountEventsResponse';
        $request = $this->addAccountEventsRequest($account_id, $add_account_events_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAccountEvents'
     *
     * @param  string $account_id (required)
     * @param  \FuseClient\Model\AddAccountEventsRequest $add_account_events_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAccountEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAccountEventsRequest($account_id, $add_account_events_request = null, string $contentType = self::contentTypes['addAccountEvents'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling addAccountEvents'
            );
        }



        $resourcePath = '/v1/accounts/{account_id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_account_events_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_account_events_request));
            } else {
                $httpBody = $add_account_events_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAssetReport
     *
     * @param  \FuseClient\Model\CreateAssetReportRequest $create_asset_report_request create_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\CreateAssetReportResponse
     */
    public function createAssetReport($create_asset_report_request = null, string $contentType = self::contentTypes['createAssetReport'][0])
    {
        list($response) = $this->createAssetReportWithHttpInfo($create_asset_report_request, $contentType);
        return $response;
    }

    /**
     * Operation createAssetReportWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateAssetReportRequest $create_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\CreateAssetReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssetReportWithHttpInfo($create_asset_report_request = null, string $contentType = self::contentTypes['createAssetReport'][0])
    {
        $request = $this->createAssetReportRequest($create_asset_report_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\CreateAssetReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\CreateAssetReportResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\CreateAssetReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\CreateAssetReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\CreateAssetReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssetReportAsync
     *
     * @param  \FuseClient\Model\CreateAssetReportRequest $create_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssetReportAsync($create_asset_report_request = null, string $contentType = self::contentTypes['createAssetReport'][0])
    {
        return $this->createAssetReportAsyncWithHttpInfo($create_asset_report_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAssetReportAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateAssetReportRequest $create_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssetReportAsyncWithHttpInfo($create_asset_report_request = null, string $contentType = self::contentTypes['createAssetReport'][0])
    {
        $returnType = '\FuseClient\Model\CreateAssetReportResponse';
        $request = $this->createAssetReportRequest($create_asset_report_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAssetReport'
     *
     * @param  \FuseClient\Model\CreateAssetReportRequest $create_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAssetReportRequest($create_asset_report_request = null, string $contentType = self::contentTypes['createAssetReport'][0])
    {



        $resourcePath = '/v1/financial_connections/asset_report/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_asset_report_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_asset_report_request));
            } else {
                $httpBody = $create_asset_report_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createConsumerRiskReport
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportRequest $create_consumer_risk_report_request create_consumer_risk_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\CreateConsumerRiskReportResponse
     */
    public function createConsumerRiskReport($create_consumer_risk_report_request = null, string $contentType = self::contentTypes['createConsumerRiskReport'][0])
    {
        list($response) = $this->createConsumerRiskReportWithHttpInfo($create_consumer_risk_report_request, $contentType);
        return $response;
    }

    /**
     * Operation createConsumerRiskReportWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportRequest $create_consumer_risk_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\CreateConsumerRiskReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConsumerRiskReportWithHttpInfo($create_consumer_risk_report_request = null, string $contentType = self::contentTypes['createConsumerRiskReport'][0])
    {
        $request = $this->createConsumerRiskReportRequest($create_consumer_risk_report_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\CreateConsumerRiskReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\CreateConsumerRiskReportResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\CreateConsumerRiskReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\CreateConsumerRiskReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\CreateConsumerRiskReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createConsumerRiskReportAsync
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportRequest $create_consumer_risk_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConsumerRiskReportAsync($create_consumer_risk_report_request = null, string $contentType = self::contentTypes['createConsumerRiskReport'][0])
    {
        return $this->createConsumerRiskReportAsyncWithHttpInfo($create_consumer_risk_report_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createConsumerRiskReportAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportRequest $create_consumer_risk_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConsumerRiskReportAsyncWithHttpInfo($create_consumer_risk_report_request = null, string $contentType = self::contentTypes['createConsumerRiskReport'][0])
    {
        $returnType = '\FuseClient\Model\CreateConsumerRiskReportResponse';
        $request = $this->createConsumerRiskReportRequest($create_consumer_risk_report_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createConsumerRiskReport'
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportRequest $create_consumer_risk_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createConsumerRiskReportRequest($create_consumer_risk_report_request = null, string $contentType = self::contentTypes['createConsumerRiskReport'][0])
    {



        $resourcePath = '/v1/risk_report/consumer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_consumer_risk_report_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_consumer_risk_report_request));
            } else {
                $httpBody = $create_consumer_risk_report_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createConsumerRiskReportCustomization
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportCustomizationRequest $create_consumer_risk_report_customization_request create_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\CreateConsumerRiskReportCustomizationResponse
     */
    public function createConsumerRiskReportCustomization($create_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['createConsumerRiskReportCustomization'][0])
    {
        list($response) = $this->createConsumerRiskReportCustomizationWithHttpInfo($create_consumer_risk_report_customization_request, $contentType);
        return $response;
    }

    /**
     * Operation createConsumerRiskReportCustomizationWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportCustomizationRequest $create_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\CreateConsumerRiskReportCustomizationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConsumerRiskReportCustomizationWithHttpInfo($create_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['createConsumerRiskReportCustomization'][0])
    {
        $request = $this->createConsumerRiskReportCustomizationRequest($create_consumer_risk_report_customization_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\CreateConsumerRiskReportCustomizationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\CreateConsumerRiskReportCustomizationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\CreateConsumerRiskReportCustomizationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\CreateConsumerRiskReportCustomizationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\CreateConsumerRiskReportCustomizationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createConsumerRiskReportCustomizationAsync
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportCustomizationRequest $create_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConsumerRiskReportCustomizationAsync($create_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['createConsumerRiskReportCustomization'][0])
    {
        return $this->createConsumerRiskReportCustomizationAsyncWithHttpInfo($create_consumer_risk_report_customization_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createConsumerRiskReportCustomizationAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportCustomizationRequest $create_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConsumerRiskReportCustomizationAsyncWithHttpInfo($create_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['createConsumerRiskReportCustomization'][0])
    {
        $returnType = '\FuseClient\Model\CreateConsumerRiskReportCustomizationResponse';
        $request = $this->createConsumerRiskReportCustomizationRequest($create_consumer_risk_report_customization_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createConsumerRiskReportCustomization'
     *
     * @param  \FuseClient\Model\CreateConsumerRiskReportCustomizationRequest $create_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createConsumerRiskReportCustomizationRequest($create_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['createConsumerRiskReportCustomization'][0])
    {



        $resourcePath = '/v1/risk_report/consumer/customization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_consumer_risk_report_customization_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_consumer_risk_report_customization_request));
            } else {
                $httpBody = $create_consumer_risk_report_customization_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLinkToken
     *
     * @param  \FuseClient\Model\CreateLinkTokenRequest $create_link_token_request create_link_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkToken'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\CreateLinkTokenResponse
     */
    public function createLinkToken($create_link_token_request = null, string $contentType = self::contentTypes['createLinkToken'][0])
    {
        list($response) = $this->createLinkTokenWithHttpInfo($create_link_token_request, $contentType);
        return $response;
    }

    /**
     * Operation createLinkTokenWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateLinkTokenRequest $create_link_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkToken'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\CreateLinkTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLinkTokenWithHttpInfo($create_link_token_request = null, string $contentType = self::contentTypes['createLinkToken'][0])
    {
        $request = $this->createLinkTokenRequest($create_link_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\CreateLinkTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\CreateLinkTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\CreateLinkTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\CreateLinkTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\CreateLinkTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLinkTokenAsync
     *
     * @param  \FuseClient\Model\CreateLinkTokenRequest $create_link_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkTokenAsync($create_link_token_request = null, string $contentType = self::contentTypes['createLinkToken'][0])
    {
        return $this->createLinkTokenAsyncWithHttpInfo($create_link_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLinkTokenAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateLinkTokenRequest $create_link_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkTokenAsyncWithHttpInfo($create_link_token_request = null, string $contentType = self::contentTypes['createLinkToken'][0])
    {
        $returnType = '\FuseClient\Model\CreateLinkTokenResponse';
        $request = $this->createLinkTokenRequest($create_link_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLinkToken'
     *
     * @param  \FuseClient\Model\CreateLinkTokenRequest $create_link_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLinkToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLinkTokenRequest($create_link_token_request = null, string $contentType = self::contentTypes['createLinkToken'][0])
    {



        $resourcePath = '/v1/link/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_link_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_link_token_request));
            } else {
                $httpBody = $create_link_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSession
     *
     * @param  \FuseClient\Model\CreateSessionRequest $create_session_request create_session_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\CreateSessionResponse
     */
    public function createSession($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {
        list($response) = $this->createSessionWithHttpInfo($create_session_request, $contentType);
        return $response;
    }

    /**
     * Operation createSessionWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateSessionRequest $create_session_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\CreateSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSessionWithHttpInfo($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {
        $request = $this->createSessionRequest($create_session_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\CreateSessionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\CreateSessionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\CreateSessionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\CreateSessionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\CreateSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSessionAsync
     *
     * @param  \FuseClient\Model\CreateSessionRequest $create_session_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionAsync($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {
        return $this->createSessionAsyncWithHttpInfo($create_session_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSessionAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\CreateSessionRequest $create_session_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionAsyncWithHttpInfo($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {
        $returnType = '\FuseClient\Model\CreateSessionResponse';
        $request = $this->createSessionRequest($create_session_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSession'
     *
     * @param  \FuseClient\Model\CreateSessionRequest $create_session_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSession'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSessionRequest($create_session_request = null, string $contentType = self::contentTypes['createSession'][0])
    {



        $resourcePath = '/v1/session';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_session_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_session_request));
            } else {
                $httpBody = $create_session_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFinancialConnection
     *
     * Delete a financial connection
     *
     * @param  string $financial_connection_id_to_delete financial_connection_id_to_delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFinancialConnection'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\DeleteFinancialConnectionResponse
     */
    public function deleteFinancialConnection($financial_connection_id_to_delete, string $contentType = self::contentTypes['deleteFinancialConnection'][0])
    {
        list($response) = $this->deleteFinancialConnectionWithHttpInfo($financial_connection_id_to_delete, $contentType);
        return $response;
    }

    /**
     * Operation deleteFinancialConnectionWithHttpInfo
     *
     * Delete a financial connection
     *
     * @param  string $financial_connection_id_to_delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFinancialConnection'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\DeleteFinancialConnectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFinancialConnectionWithHttpInfo($financial_connection_id_to_delete, string $contentType = self::contentTypes['deleteFinancialConnection'][0])
    {
        $request = $this->deleteFinancialConnectionRequest($financial_connection_id_to_delete, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\DeleteFinancialConnectionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\DeleteFinancialConnectionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\DeleteFinancialConnectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\DeleteFinancialConnectionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\DeleteFinancialConnectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFinancialConnectionAsync
     *
     * Delete a financial connection
     *
     * @param  string $financial_connection_id_to_delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFinancialConnectionAsync($financial_connection_id_to_delete, string $contentType = self::contentTypes['deleteFinancialConnection'][0])
    {
        return $this->deleteFinancialConnectionAsyncWithHttpInfo($financial_connection_id_to_delete, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFinancialConnectionAsyncWithHttpInfo
     *
     * Delete a financial connection
     *
     * @param  string $financial_connection_id_to_delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFinancialConnectionAsyncWithHttpInfo($financial_connection_id_to_delete, string $contentType = self::contentTypes['deleteFinancialConnection'][0])
    {
        $returnType = '\FuseClient\Model\DeleteFinancialConnectionResponse';
        $request = $this->deleteFinancialConnectionRequest($financial_connection_id_to_delete, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFinancialConnection'
     *
     * @param  string $financial_connection_id_to_delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFinancialConnectionRequest($financial_connection_id_to_delete, string $contentType = self::contentTypes['deleteFinancialConnection'][0])
    {

        // verify the required parameter 'financial_connection_id_to_delete' is set
        if ($financial_connection_id_to_delete === null || (is_array($financial_connection_id_to_delete) && count($financial_connection_id_to_delete) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_connection_id_to_delete when calling deleteFinancialConnection'
            );
        }


        $resourcePath = '/v1/financial_connections/{financial_connection_id_to_delete}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($financial_connection_id_to_delete !== null) {
            $resourcePath = str_replace(
                '{' . 'financial_connection_id_to_delete' . '}',
                ObjectSerializer::toPathValue($financial_connection_id_to_delete),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enrichTransactions
     *
     * @param  string $fuse_client_id fuse_client_id (required)
     * @param  string $fuse_api_key fuse_api_key (required)
     * @param  \FuseClient\Model\EnrichTransactionsRequest $enrich_transactions_request enrich_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrichTransactions'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\EnrichTransactionsResponse
     */
    public function enrichTransactions($fuse_client_id, $fuse_api_key, $enrich_transactions_request = null, string $contentType = self::contentTypes['enrichTransactions'][0])
    {
        list($response) = $this->enrichTransactionsWithHttpInfo($fuse_client_id, $fuse_api_key, $enrich_transactions_request, $contentType);
        return $response;
    }

    /**
     * Operation enrichTransactionsWithHttpInfo
     *
     * @param  string $fuse_client_id (required)
     * @param  string $fuse_api_key (required)
     * @param  \FuseClient\Model\EnrichTransactionsRequest $enrich_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrichTransactions'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\EnrichTransactionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function enrichTransactionsWithHttpInfo($fuse_client_id, $fuse_api_key, $enrich_transactions_request = null, string $contentType = self::contentTypes['enrichTransactions'][0])
    {
        $request = $this->enrichTransactionsRequest($fuse_client_id, $fuse_api_key, $enrich_transactions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\EnrichTransactionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\EnrichTransactionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\EnrichTransactionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\EnrichTransactionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\EnrichTransactionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enrichTransactionsAsync
     *
     * @param  string $fuse_client_id (required)
     * @param  string $fuse_api_key (required)
     * @param  \FuseClient\Model\EnrichTransactionsRequest $enrich_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrichTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enrichTransactionsAsync($fuse_client_id, $fuse_api_key, $enrich_transactions_request = null, string $contentType = self::contentTypes['enrichTransactions'][0])
    {
        return $this->enrichTransactionsAsyncWithHttpInfo($fuse_client_id, $fuse_api_key, $enrich_transactions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enrichTransactionsAsyncWithHttpInfo
     *
     * @param  string $fuse_client_id (required)
     * @param  string $fuse_api_key (required)
     * @param  \FuseClient\Model\EnrichTransactionsRequest $enrich_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrichTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enrichTransactionsAsyncWithHttpInfo($fuse_client_id, $fuse_api_key, $enrich_transactions_request = null, string $contentType = self::contentTypes['enrichTransactions'][0])
    {
        $returnType = '\FuseClient\Model\EnrichTransactionsResponse';
        $request = $this->enrichTransactionsRequest($fuse_client_id, $fuse_api_key, $enrich_transactions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enrichTransactions'
     *
     * @param  string $fuse_client_id (required)
     * @param  string $fuse_api_key (required)
     * @param  \FuseClient\Model\EnrichTransactionsRequest $enrich_transactions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrichTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enrichTransactionsRequest($fuse_client_id, $fuse_api_key, $enrich_transactions_request = null, string $contentType = self::contentTypes['enrichTransactions'][0])
    {

        // verify the required parameter 'fuse_client_id' is set
        if ($fuse_client_id === null || (is_array($fuse_client_id) && count($fuse_client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fuse_client_id when calling enrichTransactions'
            );
        }

        // verify the required parameter 'fuse_api_key' is set
        if ($fuse_api_key === null || (is_array($fuse_api_key) && count($fuse_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fuse_api_key when calling enrichTransactions'
            );
        }



        $resourcePath = '/v1/transactions/enrich';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($fuse_client_id !== null) {
            $headerParams['Fuse-Client-Id'] = ObjectSerializer::toHeaderValue($fuse_client_id);
        }
        // header params
        if ($fuse_api_key !== null) {
            $headerParams['Fuse-Api-Key'] = ObjectSerializer::toHeaderValue($fuse_api_key);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($enrich_transactions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($enrich_transactions_request));
            } else {
                $httpBody = $enrich_transactions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exchangeFinancialConnectionsPublicToken
     *
     * @param  \FuseClient\Model\ExchangeFinancialConnectionsPublicTokenRequest $exchange_financial_connections_public_token_request exchange_financial_connections_public_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeFinancialConnectionsPublicToken'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\ExchangeFinancialConnectionsPublicTokenResponse
     */
    public function exchangeFinancialConnectionsPublicToken($exchange_financial_connections_public_token_request = null, string $contentType = self::contentTypes['exchangeFinancialConnectionsPublicToken'][0])
    {
        list($response) = $this->exchangeFinancialConnectionsPublicTokenWithHttpInfo($exchange_financial_connections_public_token_request, $contentType);
        return $response;
    }

    /**
     * Operation exchangeFinancialConnectionsPublicTokenWithHttpInfo
     *
     * @param  \FuseClient\Model\ExchangeFinancialConnectionsPublicTokenRequest $exchange_financial_connections_public_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeFinancialConnectionsPublicToken'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\ExchangeFinancialConnectionsPublicTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function exchangeFinancialConnectionsPublicTokenWithHttpInfo($exchange_financial_connections_public_token_request = null, string $contentType = self::contentTypes['exchangeFinancialConnectionsPublicToken'][0])
    {
        $request = $this->exchangeFinancialConnectionsPublicTokenRequest($exchange_financial_connections_public_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\ExchangeFinancialConnectionsPublicTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\ExchangeFinancialConnectionsPublicTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\ExchangeFinancialConnectionsPublicTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\ExchangeFinancialConnectionsPublicTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\ExchangeFinancialConnectionsPublicTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exchangeFinancialConnectionsPublicTokenAsync
     *
     * @param  \FuseClient\Model\ExchangeFinancialConnectionsPublicTokenRequest $exchange_financial_connections_public_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeFinancialConnectionsPublicToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exchangeFinancialConnectionsPublicTokenAsync($exchange_financial_connections_public_token_request = null, string $contentType = self::contentTypes['exchangeFinancialConnectionsPublicToken'][0])
    {
        return $this->exchangeFinancialConnectionsPublicTokenAsyncWithHttpInfo($exchange_financial_connections_public_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exchangeFinancialConnectionsPublicTokenAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\ExchangeFinancialConnectionsPublicTokenRequest $exchange_financial_connections_public_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeFinancialConnectionsPublicToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exchangeFinancialConnectionsPublicTokenAsyncWithHttpInfo($exchange_financial_connections_public_token_request = null, string $contentType = self::contentTypes['exchangeFinancialConnectionsPublicToken'][0])
    {
        $returnType = '\FuseClient\Model\ExchangeFinancialConnectionsPublicTokenResponse';
        $request = $this->exchangeFinancialConnectionsPublicTokenRequest($exchange_financial_connections_public_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exchangeFinancialConnectionsPublicToken'
     *
     * @param  \FuseClient\Model\ExchangeFinancialConnectionsPublicTokenRequest $exchange_financial_connections_public_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeFinancialConnectionsPublicToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exchangeFinancialConnectionsPublicTokenRequest($exchange_financial_connections_public_token_request = null, string $contentType = self::contentTypes['exchangeFinancialConnectionsPublicToken'][0])
    {



        $resourcePath = '/v1/financial_connections/public_token/exchange';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exchange_financial_connections_public_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exchange_financial_connections_public_token_request));
            } else {
                $httpBody = $exchange_financial_connections_public_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetReport
     *
     * @param  \FuseClient\Model\GetAssetReportRequest $get_asset_report_request get_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\RefreshAssetReportResponse
     */
    public function getAssetReport($get_asset_report_request = null, string $contentType = self::contentTypes['getAssetReport'][0])
    {
        list($response) = $this->getAssetReportWithHttpInfo($get_asset_report_request, $contentType);
        return $response;
    }

    /**
     * Operation getAssetReportWithHttpInfo
     *
     * @param  \FuseClient\Model\GetAssetReportRequest $get_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\RefreshAssetReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetReportWithHttpInfo($get_asset_report_request = null, string $contentType = self::contentTypes['getAssetReport'][0])
    {
        $request = $this->getAssetReportRequest($get_asset_report_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\RefreshAssetReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\RefreshAssetReportResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\RefreshAssetReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\RefreshAssetReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\RefreshAssetReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetReportAsync
     *
     * @param  \FuseClient\Model\GetAssetReportRequest $get_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetReportAsync($get_asset_report_request = null, string $contentType = self::contentTypes['getAssetReport'][0])
    {
        return $this->getAssetReportAsyncWithHttpInfo($get_asset_report_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetReportAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\GetAssetReportRequest $get_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetReportAsyncWithHttpInfo($get_asset_report_request = null, string $contentType = self::contentTypes['getAssetReport'][0])
    {
        $returnType = '\FuseClient\Model\RefreshAssetReportResponse';
        $request = $this->getAssetReportRequest($get_asset_report_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetReport'
     *
     * @param  \FuseClient\Model\GetAssetReportRequest $get_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetReportRequest($get_asset_report_request = null, string $contentType = self::contentTypes['getAssetReport'][0])
    {



        $resourcePath = '/v1/financial_connections/asset_report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_asset_report_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_asset_report_request));
            } else {
                $httpBody = $get_asset_report_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConsumerRiskReport
     *
     * Get consumer risk report
     *
     * @param  string $consumer_risk_report_id consumer_risk_report_id (required)
     * @param  bool $recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetConsumerRiskReportResponse
     */
    public function getConsumerRiskReport($consumer_risk_report_id, $recalculate = null, string $contentType = self::contentTypes['getConsumerRiskReport'][0])
    {
        list($response) = $this->getConsumerRiskReportWithHttpInfo($consumer_risk_report_id, $recalculate, $contentType);
        return $response;
    }

    /**
     * Operation getConsumerRiskReportWithHttpInfo
     *
     * Get consumer risk report
     *
     * @param  string $consumer_risk_report_id (required)
     * @param  bool $recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetConsumerRiskReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsumerRiskReportWithHttpInfo($consumer_risk_report_id, $recalculate = null, string $contentType = self::contentTypes['getConsumerRiskReport'][0])
    {
        $request = $this->getConsumerRiskReportRequest($consumer_risk_report_id, $recalculate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetConsumerRiskReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetConsumerRiskReportResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetConsumerRiskReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetConsumerRiskReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetConsumerRiskReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConsumerRiskReportAsync
     *
     * Get consumer risk report
     *
     * @param  string $consumer_risk_report_id (required)
     * @param  bool $recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsumerRiskReportAsync($consumer_risk_report_id, $recalculate = null, string $contentType = self::contentTypes['getConsumerRiskReport'][0])
    {
        return $this->getConsumerRiskReportAsyncWithHttpInfo($consumer_risk_report_id, $recalculate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConsumerRiskReportAsyncWithHttpInfo
     *
     * Get consumer risk report
     *
     * @param  string $consumer_risk_report_id (required)
     * @param  bool $recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsumerRiskReportAsyncWithHttpInfo($consumer_risk_report_id, $recalculate = null, string $contentType = self::contentTypes['getConsumerRiskReport'][0])
    {
        $returnType = '\FuseClient\Model\GetConsumerRiskReportResponse';
        $request = $this->getConsumerRiskReportRequest($consumer_risk_report_id, $recalculate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConsumerRiskReport'
     *
     * @param  string $consumer_risk_report_id (required)
     * @param  bool $recalculate An optional boolean parameter. If set to true, the system will recalculate before returning the risk report. If omitted or set to false, the current risk report will be returned without recalculation. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConsumerRiskReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConsumerRiskReportRequest($consumer_risk_report_id, $recalculate = null, string $contentType = self::contentTypes['getConsumerRiskReport'][0])
    {

        // verify the required parameter 'consumer_risk_report_id' is set
        if ($consumer_risk_report_id === null || (is_array($consumer_risk_report_id) && count($consumer_risk_report_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consumer_risk_report_id when calling getConsumerRiskReport'
            );
        }



        $resourcePath = '/v1/risk_report/consumer/{consumer_risk_report_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recalculate,
            'recalculate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($consumer_risk_report_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consumer_risk_report_id' . '}',
                ObjectSerializer::toPathValue($consumer_risk_report_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEntity
     *
     * Get entity
     *
     * @param  string $entity_id entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntity'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetEntityResponse
     */
    public function getEntity($entity_id, string $contentType = self::contentTypes['getEntity'][0])
    {
        list($response) = $this->getEntityWithHttpInfo($entity_id, $contentType);
        return $response;
    }

    /**
     * Operation getEntityWithHttpInfo
     *
     * Get entity
     *
     * @param  string $entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntity'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetEntityResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntityWithHttpInfo($entity_id, string $contentType = self::contentTypes['getEntity'][0])
    {
        $request = $this->getEntityRequest($entity_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetEntityResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetEntityResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetEntityResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetEntityResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetEntityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEntityAsync
     *
     * Get entity
     *
     * @param  string $entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntityAsync($entity_id, string $contentType = self::contentTypes['getEntity'][0])
    {
        return $this->getEntityAsyncWithHttpInfo($entity_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntityAsyncWithHttpInfo
     *
     * Get entity
     *
     * @param  string $entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntityAsyncWithHttpInfo($entity_id, string $contentType = self::contentTypes['getEntity'][0])
    {
        $returnType = '\FuseClient\Model\GetEntityResponse';
        $request = $this->getEntityRequest($entity_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntity'
     *
     * @param  string $entity_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEntity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEntityRequest($entity_id, string $contentType = self::contentTypes['getEntity'][0])
    {

        // verify the required parameter 'entity_id' is set
        if ($entity_id === null || (is_array($entity_id) && count($entity_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entity_id when calling getEntity'
            );
        }


        $resourcePath = '/v1/entities/{entity_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                '{' . 'entity_id' . '}',
                ObjectSerializer::toPathValue($entity_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinanceScore
     *
     * Get finance score
     *
     * @param  string $account_id account_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinanceScore'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinanceScoreResponse
     */
    public function getFinanceScore($account_id, string $contentType = self::contentTypes['getFinanceScore'][0])
    {
        list($response) = $this->getFinanceScoreWithHttpInfo($account_id, $contentType);
        return $response;
    }

    /**
     * Operation getFinanceScoreWithHttpInfo
     *
     * Get finance score
     *
     * @param  string $account_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinanceScore'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinanceScoreResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinanceScoreWithHttpInfo($account_id, string $contentType = self::contentTypes['getFinanceScore'][0])
    {
        $request = $this->getFinanceScoreRequest($account_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinanceScoreResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinanceScoreResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinanceScoreResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinanceScoreResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinanceScoreResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinanceScoreAsync
     *
     * Get finance score
     *
     * @param  string $account_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinanceScore'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinanceScoreAsync($account_id, string $contentType = self::contentTypes['getFinanceScore'][0])
    {
        return $this->getFinanceScoreAsyncWithHttpInfo($account_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinanceScoreAsyncWithHttpInfo
     *
     * Get finance score
     *
     * @param  string $account_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinanceScore'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinanceScoreAsyncWithHttpInfo($account_id, string $contentType = self::contentTypes['getFinanceScore'][0])
    {
        $returnType = '\FuseClient\Model\GetFinanceScoreResponse';
        $request = $this->getFinanceScoreRequest($account_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinanceScore'
     *
     * @param  string $account_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinanceScore'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinanceScoreRequest($account_id, string $contentType = self::contentTypes['getFinanceScore'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getFinanceScore'
            );
        }


        $resourcePath = '/v1/accounts/{account_id}/finance_score';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialConnection
     *
     * Get financial connection details
     *
     * @param  string $financial_connection_id financial_connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnection'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinancialConnectionResponse
     */
    public function getFinancialConnection($financial_connection_id, string $contentType = self::contentTypes['getFinancialConnection'][0])
    {
        list($response) = $this->getFinancialConnectionWithHttpInfo($financial_connection_id, $contentType);
        return $response;
    }

    /**
     * Operation getFinancialConnectionWithHttpInfo
     *
     * Get financial connection details
     *
     * @param  string $financial_connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnection'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinancialConnectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialConnectionWithHttpInfo($financial_connection_id, string $contentType = self::contentTypes['getFinancialConnection'][0])
    {
        $request = $this->getFinancialConnectionRequest($financial_connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinancialConnectionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinancialConnectionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinancialConnectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinancialConnectionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinancialConnectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialConnectionAsync
     *
     * Get financial connection details
     *
     * @param  string $financial_connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionAsync($financial_connection_id, string $contentType = self::contentTypes['getFinancialConnection'][0])
    {
        return $this->getFinancialConnectionAsyncWithHttpInfo($financial_connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialConnectionAsyncWithHttpInfo
     *
     * Get financial connection details
     *
     * @param  string $financial_connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionAsyncWithHttpInfo($financial_connection_id, string $contentType = self::contentTypes['getFinancialConnection'][0])
    {
        $returnType = '\FuseClient\Model\GetFinancialConnectionResponse';
        $request = $this->getFinancialConnectionRequest($financial_connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialConnection'
     *
     * @param  string $financial_connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinancialConnectionRequest($financial_connection_id, string $contentType = self::contentTypes['getFinancialConnection'][0])
    {

        // verify the required parameter 'financial_connection_id' is set
        if ($financial_connection_id === null || (is_array($financial_connection_id) && count($financial_connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $financial_connection_id when calling getFinancialConnection'
            );
        }


        $resourcePath = '/v1/financial_connections/{financial_connection_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($financial_connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'financial_connection_id' . '}',
                ObjectSerializer::toPathValue($financial_connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialConnectionsAccountDetails
     *
     * Get account details
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountDetailsRequest $get_financial_connections_account_details_request get_financial_connections_account_details_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountDetails'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinancialConnectionsAccountDetailsResponse
     */
    public function getFinancialConnectionsAccountDetails($get_financial_connections_account_details_request, string $contentType = self::contentTypes['getFinancialConnectionsAccountDetails'][0])
    {
        list($response) = $this->getFinancialConnectionsAccountDetailsWithHttpInfo($get_financial_connections_account_details_request, $contentType);
        return $response;
    }

    /**
     * Operation getFinancialConnectionsAccountDetailsWithHttpInfo
     *
     * Get account details
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountDetailsRequest $get_financial_connections_account_details_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountDetails'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinancialConnectionsAccountDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialConnectionsAccountDetailsWithHttpInfo($get_financial_connections_account_details_request, string $contentType = self::contentTypes['getFinancialConnectionsAccountDetails'][0])
    {
        $request = $this->getFinancialConnectionsAccountDetailsRequest($get_financial_connections_account_details_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinancialConnectionsAccountDetailsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinancialConnectionsAccountDetailsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinancialConnectionsAccountDetailsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinancialConnectionsAccountDetailsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinancialConnectionsAccountDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialConnectionsAccountDetailsAsync
     *
     * Get account details
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountDetailsRequest $get_financial_connections_account_details_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsAccountDetailsAsync($get_financial_connections_account_details_request, string $contentType = self::contentTypes['getFinancialConnectionsAccountDetails'][0])
    {
        return $this->getFinancialConnectionsAccountDetailsAsyncWithHttpInfo($get_financial_connections_account_details_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialConnectionsAccountDetailsAsyncWithHttpInfo
     *
     * Get account details
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountDetailsRequest $get_financial_connections_account_details_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsAccountDetailsAsyncWithHttpInfo($get_financial_connections_account_details_request, string $contentType = self::contentTypes['getFinancialConnectionsAccountDetails'][0])
    {
        $returnType = '\FuseClient\Model\GetFinancialConnectionsAccountDetailsResponse';
        $request = $this->getFinancialConnectionsAccountDetailsRequest($get_financial_connections_account_details_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialConnectionsAccountDetails'
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountDetailsRequest $get_financial_connections_account_details_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinancialConnectionsAccountDetailsRequest($get_financial_connections_account_details_request, string $contentType = self::contentTypes['getFinancialConnectionsAccountDetails'][0])
    {

        // verify the required parameter 'get_financial_connections_account_details_request' is set
        if ($get_financial_connections_account_details_request === null || (is_array($get_financial_connections_account_details_request) && count($get_financial_connections_account_details_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_financial_connections_account_details_request when calling getFinancialConnectionsAccountDetails'
            );
        }


        $resourcePath = '/v1/financial_connections/accounts/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_financial_connections_account_details_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_financial_connections_account_details_request));
            } else {
                $httpBody = $get_financial_connections_account_details_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialConnectionsAccountStatement
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountStatementRequest $get_financial_connections_account_statement_request get_financial_connections_account_statement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountStatement'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinancialConnectionsAccountStatementResponse
     */
    public function getFinancialConnectionsAccountStatement($get_financial_connections_account_statement_request = null, string $contentType = self::contentTypes['getFinancialConnectionsAccountStatement'][0])
    {
        list($response) = $this->getFinancialConnectionsAccountStatementWithHttpInfo($get_financial_connections_account_statement_request, $contentType);
        return $response;
    }

    /**
     * Operation getFinancialConnectionsAccountStatementWithHttpInfo
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountStatementRequest $get_financial_connections_account_statement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountStatement'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinancialConnectionsAccountStatementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialConnectionsAccountStatementWithHttpInfo($get_financial_connections_account_statement_request = null, string $contentType = self::contentTypes['getFinancialConnectionsAccountStatement'][0])
    {
        $request = $this->getFinancialConnectionsAccountStatementRequest($get_financial_connections_account_statement_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinancialConnectionsAccountStatementResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinancialConnectionsAccountStatementResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinancialConnectionsAccountStatementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinancialConnectionsAccountStatementResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinancialConnectionsAccountStatementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialConnectionsAccountStatementAsync
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountStatementRequest $get_financial_connections_account_statement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsAccountStatementAsync($get_financial_connections_account_statement_request = null, string $contentType = self::contentTypes['getFinancialConnectionsAccountStatement'][0])
    {
        return $this->getFinancialConnectionsAccountStatementAsyncWithHttpInfo($get_financial_connections_account_statement_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialConnectionsAccountStatementAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountStatementRequest $get_financial_connections_account_statement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsAccountStatementAsyncWithHttpInfo($get_financial_connections_account_statement_request = null, string $contentType = self::contentTypes['getFinancialConnectionsAccountStatement'][0])
    {
        $returnType = '\FuseClient\Model\GetFinancialConnectionsAccountStatementResponse';
        $request = $this->getFinancialConnectionsAccountStatementRequest($get_financial_connections_account_statement_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialConnectionsAccountStatement'
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountStatementRequest $get_financial_connections_account_statement_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccountStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinancialConnectionsAccountStatementRequest($get_financial_connections_account_statement_request = null, string $contentType = self::contentTypes['getFinancialConnectionsAccountStatement'][0])
    {



        $resourcePath = '/v1/financial_connections/accounts/statement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_financial_connections_account_statement_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_financial_connections_account_statement_request));
            } else {
                $httpBody = $get_financial_connections_account_statement_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialConnectionsAccounts
     *
     * Get accounts
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountsRequest $get_financial_connections_accounts_request get_financial_connections_accounts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccounts'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinancialConnectionsAccountsResponse
     */
    public function getFinancialConnectionsAccounts($get_financial_connections_accounts_request, string $contentType = self::contentTypes['getFinancialConnectionsAccounts'][0])
    {
        list($response) = $this->getFinancialConnectionsAccountsWithHttpInfo($get_financial_connections_accounts_request, $contentType);
        return $response;
    }

    /**
     * Operation getFinancialConnectionsAccountsWithHttpInfo
     *
     * Get accounts
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountsRequest $get_financial_connections_accounts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccounts'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinancialConnectionsAccountsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialConnectionsAccountsWithHttpInfo($get_financial_connections_accounts_request, string $contentType = self::contentTypes['getFinancialConnectionsAccounts'][0])
    {
        $request = $this->getFinancialConnectionsAccountsRequest($get_financial_connections_accounts_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinancialConnectionsAccountsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinancialConnectionsAccountsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinancialConnectionsAccountsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinancialConnectionsAccountsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinancialConnectionsAccountsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialConnectionsAccountsAsync
     *
     * Get accounts
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountsRequest $get_financial_connections_accounts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsAccountsAsync($get_financial_connections_accounts_request, string $contentType = self::contentTypes['getFinancialConnectionsAccounts'][0])
    {
        return $this->getFinancialConnectionsAccountsAsyncWithHttpInfo($get_financial_connections_accounts_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialConnectionsAccountsAsyncWithHttpInfo
     *
     * Get accounts
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountsRequest $get_financial_connections_accounts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsAccountsAsyncWithHttpInfo($get_financial_connections_accounts_request, string $contentType = self::contentTypes['getFinancialConnectionsAccounts'][0])
    {
        $returnType = '\FuseClient\Model\GetFinancialConnectionsAccountsResponse';
        $request = $this->getFinancialConnectionsAccountsRequest($get_financial_connections_accounts_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialConnectionsAccounts'
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsAccountsRequest $get_financial_connections_accounts_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinancialConnectionsAccountsRequest($get_financial_connections_accounts_request, string $contentType = self::contentTypes['getFinancialConnectionsAccounts'][0])
    {

        // verify the required parameter 'get_financial_connections_accounts_request' is set
        if ($get_financial_connections_accounts_request === null || (is_array($get_financial_connections_accounts_request) && count($get_financial_connections_accounts_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_financial_connections_accounts_request when calling getFinancialConnectionsAccounts'
            );
        }


        $resourcePath = '/v1/financial_connections/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_financial_connections_accounts_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_financial_connections_accounts_request));
            } else {
                $httpBody = $get_financial_connections_accounts_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialConnectionsBalances
     *
     * Get balances
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsBalanceRequest $get_financial_connections_balance_request get_financial_connections_balance_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsBalances'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinancialConnectionsBalanceResponse
     */
    public function getFinancialConnectionsBalances($get_financial_connections_balance_request, string $contentType = self::contentTypes['getFinancialConnectionsBalances'][0])
    {
        list($response) = $this->getFinancialConnectionsBalancesWithHttpInfo($get_financial_connections_balance_request, $contentType);
        return $response;
    }

    /**
     * Operation getFinancialConnectionsBalancesWithHttpInfo
     *
     * Get balances
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsBalanceRequest $get_financial_connections_balance_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsBalances'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinancialConnectionsBalanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialConnectionsBalancesWithHttpInfo($get_financial_connections_balance_request, string $contentType = self::contentTypes['getFinancialConnectionsBalances'][0])
    {
        $request = $this->getFinancialConnectionsBalancesRequest($get_financial_connections_balance_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinancialConnectionsBalanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinancialConnectionsBalanceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinancialConnectionsBalanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinancialConnectionsBalanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinancialConnectionsBalanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialConnectionsBalancesAsync
     *
     * Get balances
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsBalanceRequest $get_financial_connections_balance_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsBalancesAsync($get_financial_connections_balance_request, string $contentType = self::contentTypes['getFinancialConnectionsBalances'][0])
    {
        return $this->getFinancialConnectionsBalancesAsyncWithHttpInfo($get_financial_connections_balance_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialConnectionsBalancesAsyncWithHttpInfo
     *
     * Get balances
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsBalanceRequest $get_financial_connections_balance_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsBalancesAsyncWithHttpInfo($get_financial_connections_balance_request, string $contentType = self::contentTypes['getFinancialConnectionsBalances'][0])
    {
        $returnType = '\FuseClient\Model\GetFinancialConnectionsBalanceResponse';
        $request = $this->getFinancialConnectionsBalancesRequest($get_financial_connections_balance_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialConnectionsBalances'
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsBalanceRequest $get_financial_connections_balance_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinancialConnectionsBalancesRequest($get_financial_connections_balance_request, string $contentType = self::contentTypes['getFinancialConnectionsBalances'][0])
    {

        // verify the required parameter 'get_financial_connections_balance_request' is set
        if ($get_financial_connections_balance_request === null || (is_array($get_financial_connections_balance_request) && count($get_financial_connections_balance_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_financial_connections_balance_request when calling getFinancialConnectionsBalances'
            );
        }


        $resourcePath = '/v1/financial_connections/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_financial_connections_balance_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_financial_connections_balance_request));
            } else {
                $httpBody = $get_financial_connections_balance_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialConnectionsOwners
     *
     * Get account owners
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsOwnersRequest $get_financial_connections_owners_request get_financial_connections_owners_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsOwners'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinancialConnectionsOwnersResponse
     */
    public function getFinancialConnectionsOwners($get_financial_connections_owners_request, string $contentType = self::contentTypes['getFinancialConnectionsOwners'][0])
    {
        list($response) = $this->getFinancialConnectionsOwnersWithHttpInfo($get_financial_connections_owners_request, $contentType);
        return $response;
    }

    /**
     * Operation getFinancialConnectionsOwnersWithHttpInfo
     *
     * Get account owners
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsOwnersRequest $get_financial_connections_owners_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsOwners'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinancialConnectionsOwnersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialConnectionsOwnersWithHttpInfo($get_financial_connections_owners_request, string $contentType = self::contentTypes['getFinancialConnectionsOwners'][0])
    {
        $request = $this->getFinancialConnectionsOwnersRequest($get_financial_connections_owners_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinancialConnectionsOwnersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinancialConnectionsOwnersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinancialConnectionsOwnersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinancialConnectionsOwnersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinancialConnectionsOwnersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialConnectionsOwnersAsync
     *
     * Get account owners
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsOwnersRequest $get_financial_connections_owners_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsOwners'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsOwnersAsync($get_financial_connections_owners_request, string $contentType = self::contentTypes['getFinancialConnectionsOwners'][0])
    {
        return $this->getFinancialConnectionsOwnersAsyncWithHttpInfo($get_financial_connections_owners_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialConnectionsOwnersAsyncWithHttpInfo
     *
     * Get account owners
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsOwnersRequest $get_financial_connections_owners_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsOwners'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsOwnersAsyncWithHttpInfo($get_financial_connections_owners_request, string $contentType = self::contentTypes['getFinancialConnectionsOwners'][0])
    {
        $returnType = '\FuseClient\Model\GetFinancialConnectionsOwnersResponse';
        $request = $this->getFinancialConnectionsOwnersRequest($get_financial_connections_owners_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialConnectionsOwners'
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsOwnersRequest $get_financial_connections_owners_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsOwners'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinancialConnectionsOwnersRequest($get_financial_connections_owners_request, string $contentType = self::contentTypes['getFinancialConnectionsOwners'][0])
    {

        // verify the required parameter 'get_financial_connections_owners_request' is set
        if ($get_financial_connections_owners_request === null || (is_array($get_financial_connections_owners_request) && count($get_financial_connections_owners_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_financial_connections_owners_request when calling getFinancialConnectionsOwners'
            );
        }


        $resourcePath = '/v1/financial_connections/owners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_financial_connections_owners_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_financial_connections_owners_request));
            } else {
                $httpBody = $get_financial_connections_owners_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialConnectionsTransactions
     *
     * Get transactions
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsTransactionsRequest $get_financial_connections_transactions_request get_financial_connections_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsTransactions'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinancialConnectionsTransactionsResponse
     */
    public function getFinancialConnectionsTransactions($get_financial_connections_transactions_request, string $contentType = self::contentTypes['getFinancialConnectionsTransactions'][0])
    {
        list($response) = $this->getFinancialConnectionsTransactionsWithHttpInfo($get_financial_connections_transactions_request, $contentType);
        return $response;
    }

    /**
     * Operation getFinancialConnectionsTransactionsWithHttpInfo
     *
     * Get transactions
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsTransactionsRequest $get_financial_connections_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsTransactions'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinancialConnectionsTransactionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialConnectionsTransactionsWithHttpInfo($get_financial_connections_transactions_request, string $contentType = self::contentTypes['getFinancialConnectionsTransactions'][0])
    {
        $request = $this->getFinancialConnectionsTransactionsRequest($get_financial_connections_transactions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinancialConnectionsTransactionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinancialConnectionsTransactionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinancialConnectionsTransactionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinancialConnectionsTransactionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinancialConnectionsTransactionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialConnectionsTransactionsAsync
     *
     * Get transactions
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsTransactionsRequest $get_financial_connections_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsTransactionsAsync($get_financial_connections_transactions_request, string $contentType = self::contentTypes['getFinancialConnectionsTransactions'][0])
    {
        return $this->getFinancialConnectionsTransactionsAsyncWithHttpInfo($get_financial_connections_transactions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialConnectionsTransactionsAsyncWithHttpInfo
     *
     * Get transactions
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsTransactionsRequest $get_financial_connections_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialConnectionsTransactionsAsyncWithHttpInfo($get_financial_connections_transactions_request, string $contentType = self::contentTypes['getFinancialConnectionsTransactions'][0])
    {
        $returnType = '\FuseClient\Model\GetFinancialConnectionsTransactionsResponse';
        $request = $this->getFinancialConnectionsTransactionsRequest($get_financial_connections_transactions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialConnectionsTransactions'
     *
     * @param  \FuseClient\Model\GetFinancialConnectionsTransactionsRequest $get_financial_connections_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialConnectionsTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinancialConnectionsTransactionsRequest($get_financial_connections_transactions_request, string $contentType = self::contentTypes['getFinancialConnectionsTransactions'][0])
    {

        // verify the required parameter 'get_financial_connections_transactions_request' is set
        if ($get_financial_connections_transactions_request === null || (is_array($get_financial_connections_transactions_request) && count($get_financial_connections_transactions_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_financial_connections_transactions_request when calling getFinancialConnectionsTransactions'
            );
        }


        $resourcePath = '/v1/financial_connections/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_financial_connections_transactions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_financial_connections_transactions_request));
            } else {
                $httpBody = $get_financial_connections_transactions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFinancialInstitution
     *
     * Get a financial institution
     *
     * @param  string $institution_id institution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialInstitution'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetFinancialInstitutionResponse
     */
    public function getFinancialInstitution($institution_id, string $contentType = self::contentTypes['getFinancialInstitution'][0])
    {
        list($response) = $this->getFinancialInstitutionWithHttpInfo($institution_id, $contentType);
        return $response;
    }

    /**
     * Operation getFinancialInstitutionWithHttpInfo
     *
     * Get a financial institution
     *
     * @param  string $institution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialInstitution'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetFinancialInstitutionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFinancialInstitutionWithHttpInfo($institution_id, string $contentType = self::contentTypes['getFinancialInstitution'][0])
    {
        $request = $this->getFinancialInstitutionRequest($institution_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetFinancialInstitutionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetFinancialInstitutionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetFinancialInstitutionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetFinancialInstitutionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetFinancialInstitutionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFinancialInstitutionAsync
     *
     * Get a financial institution
     *
     * @param  string $institution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialInstitutionAsync($institution_id, string $contentType = self::contentTypes['getFinancialInstitution'][0])
    {
        return $this->getFinancialInstitutionAsyncWithHttpInfo($institution_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFinancialInstitutionAsyncWithHttpInfo
     *
     * Get a financial institution
     *
     * @param  string $institution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFinancialInstitutionAsyncWithHttpInfo($institution_id, string $contentType = self::contentTypes['getFinancialInstitution'][0])
    {
        $returnType = '\FuseClient\Model\GetFinancialInstitutionResponse';
        $request = $this->getFinancialInstitutionRequest($institution_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFinancialInstitution'
     *
     * @param  string $institution_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFinancialInstitution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFinancialInstitutionRequest($institution_id, string $contentType = self::contentTypes['getFinancialInstitution'][0])
    {

        // verify the required parameter 'institution_id' is set
        if ($institution_id === null || (is_array($institution_id) && count($institution_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $institution_id when calling getFinancialInstitution'
            );
        }


        $resourcePath = '/v1/financial_connections/institutions/{institution_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($institution_id !== null) {
            $resourcePath = str_replace(
                '{' . 'institution_id' . '}',
                ObjectSerializer::toPathValue($institution_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvestmentHoldings
     *
     * Get investment holdings
     *
     * @param  \FuseClient\Model\GetInvestmentHoldingsRequest $get_investment_holdings_request get_investment_holdings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentHoldings'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetInvestmentHoldingsResponse
     */
    public function getInvestmentHoldings($get_investment_holdings_request, string $contentType = self::contentTypes['getInvestmentHoldings'][0])
    {
        list($response) = $this->getInvestmentHoldingsWithHttpInfo($get_investment_holdings_request, $contentType);
        return $response;
    }

    /**
     * Operation getInvestmentHoldingsWithHttpInfo
     *
     * Get investment holdings
     *
     * @param  \FuseClient\Model\GetInvestmentHoldingsRequest $get_investment_holdings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentHoldings'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetInvestmentHoldingsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvestmentHoldingsWithHttpInfo($get_investment_holdings_request, string $contentType = self::contentTypes['getInvestmentHoldings'][0])
    {
        $request = $this->getInvestmentHoldingsRequest($get_investment_holdings_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetInvestmentHoldingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetInvestmentHoldingsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetInvestmentHoldingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetInvestmentHoldingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetInvestmentHoldingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvestmentHoldingsAsync
     *
     * Get investment holdings
     *
     * @param  \FuseClient\Model\GetInvestmentHoldingsRequest $get_investment_holdings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentHoldings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvestmentHoldingsAsync($get_investment_holdings_request, string $contentType = self::contentTypes['getInvestmentHoldings'][0])
    {
        return $this->getInvestmentHoldingsAsyncWithHttpInfo($get_investment_holdings_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvestmentHoldingsAsyncWithHttpInfo
     *
     * Get investment holdings
     *
     * @param  \FuseClient\Model\GetInvestmentHoldingsRequest $get_investment_holdings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentHoldings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvestmentHoldingsAsyncWithHttpInfo($get_investment_holdings_request, string $contentType = self::contentTypes['getInvestmentHoldings'][0])
    {
        $returnType = '\FuseClient\Model\GetInvestmentHoldingsResponse';
        $request = $this->getInvestmentHoldingsRequest($get_investment_holdings_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvestmentHoldings'
     *
     * @param  \FuseClient\Model\GetInvestmentHoldingsRequest $get_investment_holdings_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentHoldings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvestmentHoldingsRequest($get_investment_holdings_request, string $contentType = self::contentTypes['getInvestmentHoldings'][0])
    {

        // verify the required parameter 'get_investment_holdings_request' is set
        if ($get_investment_holdings_request === null || (is_array($get_investment_holdings_request) && count($get_investment_holdings_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_investment_holdings_request when calling getInvestmentHoldings'
            );
        }


        $resourcePath = '/v1/financial_connections/investments/holdings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_investment_holdings_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_investment_holdings_request));
            } else {
                $httpBody = $get_investment_holdings_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvestmentTransactions
     *
     * Get investment transactions
     *
     * @param  \FuseClient\Model\GetInvestmentTransactionsRequest $get_investment_transactions_request get_investment_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentTransactions'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetInvestmentTransactionsResponse
     */
    public function getInvestmentTransactions($get_investment_transactions_request, string $contentType = self::contentTypes['getInvestmentTransactions'][0])
    {
        list($response) = $this->getInvestmentTransactionsWithHttpInfo($get_investment_transactions_request, $contentType);
        return $response;
    }

    /**
     * Operation getInvestmentTransactionsWithHttpInfo
     *
     * Get investment transactions
     *
     * @param  \FuseClient\Model\GetInvestmentTransactionsRequest $get_investment_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentTransactions'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetInvestmentTransactionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvestmentTransactionsWithHttpInfo($get_investment_transactions_request, string $contentType = self::contentTypes['getInvestmentTransactions'][0])
    {
        $request = $this->getInvestmentTransactionsRequest($get_investment_transactions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetInvestmentTransactionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetInvestmentTransactionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetInvestmentTransactionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetInvestmentTransactionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetInvestmentTransactionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvestmentTransactionsAsync
     *
     * Get investment transactions
     *
     * @param  \FuseClient\Model\GetInvestmentTransactionsRequest $get_investment_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvestmentTransactionsAsync($get_investment_transactions_request, string $contentType = self::contentTypes['getInvestmentTransactions'][0])
    {
        return $this->getInvestmentTransactionsAsyncWithHttpInfo($get_investment_transactions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvestmentTransactionsAsyncWithHttpInfo
     *
     * Get investment transactions
     *
     * @param  \FuseClient\Model\GetInvestmentTransactionsRequest $get_investment_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvestmentTransactionsAsyncWithHttpInfo($get_investment_transactions_request, string $contentType = self::contentTypes['getInvestmentTransactions'][0])
    {
        $returnType = '\FuseClient\Model\GetInvestmentTransactionsResponse';
        $request = $this->getInvestmentTransactionsRequest($get_investment_transactions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvestmentTransactions'
     *
     * @param  \FuseClient\Model\GetInvestmentTransactionsRequest $get_investment_transactions_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvestmentTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvestmentTransactionsRequest($get_investment_transactions_request, string $contentType = self::contentTypes['getInvestmentTransactions'][0])
    {

        // verify the required parameter 'get_investment_transactions_request' is set
        if ($get_investment_transactions_request === null || (is_array($get_investment_transactions_request) && count($get_investment_transactions_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_investment_transactions_request when calling getInvestmentTransactions'
            );
        }


        $resourcePath = '/v1/financial_connections/investments/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_investment_transactions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_investment_transactions_request));
            } else {
                $httpBody = $get_investment_transactions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrateFinancialConnection
     *
     * Migrate financial connection
     *
     * @param  \FuseClient\Model\MigrateFinancialConnectionsTokenRequest $migrate_financial_connections_token_request migrate_financial_connections_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateFinancialConnection'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\MigrateFinancialConnectionsTokenResponse
     */
    public function migrateFinancialConnection($migrate_financial_connections_token_request = null, string $contentType = self::contentTypes['migrateFinancialConnection'][0])
    {
        list($response) = $this->migrateFinancialConnectionWithHttpInfo($migrate_financial_connections_token_request, $contentType);
        return $response;
    }

    /**
     * Operation migrateFinancialConnectionWithHttpInfo
     *
     * Migrate financial connection
     *
     * @param  \FuseClient\Model\MigrateFinancialConnectionsTokenRequest $migrate_financial_connections_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateFinancialConnection'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\MigrateFinancialConnectionsTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrateFinancialConnectionWithHttpInfo($migrate_financial_connections_token_request = null, string $contentType = self::contentTypes['migrateFinancialConnection'][0])
    {
        $request = $this->migrateFinancialConnectionRequest($migrate_financial_connections_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\MigrateFinancialConnectionsTokenResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\MigrateFinancialConnectionsTokenResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\MigrateFinancialConnectionsTokenResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\MigrateFinancialConnectionsTokenResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\MigrateFinancialConnectionsTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation migrateFinancialConnectionAsync
     *
     * Migrate financial connection
     *
     * @param  \FuseClient\Model\MigrateFinancialConnectionsTokenRequest $migrate_financial_connections_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrateFinancialConnectionAsync($migrate_financial_connections_token_request = null, string $contentType = self::contentTypes['migrateFinancialConnection'][0])
    {
        return $this->migrateFinancialConnectionAsyncWithHttpInfo($migrate_financial_connections_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation migrateFinancialConnectionAsyncWithHttpInfo
     *
     * Migrate financial connection
     *
     * @param  \FuseClient\Model\MigrateFinancialConnectionsTokenRequest $migrate_financial_connections_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrateFinancialConnectionAsyncWithHttpInfo($migrate_financial_connections_token_request = null, string $contentType = self::contentTypes['migrateFinancialConnection'][0])
    {
        $returnType = '\FuseClient\Model\MigrateFinancialConnectionsTokenResponse';
        $request = $this->migrateFinancialConnectionRequest($migrate_financial_connections_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'migrateFinancialConnection'
     *
     * @param  \FuseClient\Model\MigrateFinancialConnectionsTokenRequest $migrate_financial_connections_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrateFinancialConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrateFinancialConnectionRequest($migrate_financial_connections_token_request = null, string $contentType = self::contentTypes['migrateFinancialConnection'][0])
    {



        $resourcePath = '/v1/financial_connections/migrate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($migrate_financial_connections_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($migrate_financial_connections_token_request));
            } else {
                $httpBody = $migrate_financial_connections_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshAssetReport
     *
     * @param  \FuseClient\Model\RefreshAssetReportRequest $refresh_asset_report_request refresh_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshAssetReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\AssetReportResponse
     */
    public function refreshAssetReport($refresh_asset_report_request = null, string $contentType = self::contentTypes['refreshAssetReport'][0])
    {
        list($response) = $this->refreshAssetReportWithHttpInfo($refresh_asset_report_request, $contentType);
        return $response;
    }

    /**
     * Operation refreshAssetReportWithHttpInfo
     *
     * @param  \FuseClient\Model\RefreshAssetReportRequest $refresh_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshAssetReport'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\AssetReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshAssetReportWithHttpInfo($refresh_asset_report_request = null, string $contentType = self::contentTypes['refreshAssetReport'][0])
    {
        $request = $this->refreshAssetReportRequest($refresh_asset_report_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\AssetReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\AssetReportResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\AssetReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\AssetReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\AssetReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refreshAssetReportAsync
     *
     * @param  \FuseClient\Model\RefreshAssetReportRequest $refresh_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshAssetReportAsync($refresh_asset_report_request = null, string $contentType = self::contentTypes['refreshAssetReport'][0])
    {
        return $this->refreshAssetReportAsyncWithHttpInfo($refresh_asset_report_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshAssetReportAsyncWithHttpInfo
     *
     * @param  \FuseClient\Model\RefreshAssetReportRequest $refresh_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshAssetReportAsyncWithHttpInfo($refresh_asset_report_request = null, string $contentType = self::contentTypes['refreshAssetReport'][0])
    {
        $returnType = '\FuseClient\Model\AssetReportResponse';
        $request = $this->refreshAssetReportRequest($refresh_asset_report_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshAssetReport'
     *
     * @param  \FuseClient\Model\RefreshAssetReportRequest $refresh_asset_report_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshAssetReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshAssetReportRequest($refresh_asset_report_request = null, string $contentType = self::contentTypes['refreshAssetReport'][0])
    {



        $resourcePath = '/v1/financial_connections/asset_report/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($refresh_asset_report_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refresh_asset_report_request));
            } else {
                $httpBody = $refresh_asset_report_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncFinancialConnectionsData
     *
     * Sync financial connections data
     *
     * @param  string $fuse_verification fuse_verification (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFinancialConnectionsData'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\SyncFinancialConnectionsDataResponse
     */
    public function syncFinancialConnectionsData($fuse_verification, $body, string $contentType = self::contentTypes['syncFinancialConnectionsData'][0])
    {
        list($response) = $this->syncFinancialConnectionsDataWithHttpInfo($fuse_verification, $body, $contentType);
        return $response;
    }

    /**
     * Operation syncFinancialConnectionsDataWithHttpInfo
     *
     * Sync financial connections data
     *
     * @param  string $fuse_verification (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFinancialConnectionsData'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\SyncFinancialConnectionsDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncFinancialConnectionsDataWithHttpInfo($fuse_verification, $body, string $contentType = self::contentTypes['syncFinancialConnectionsData'][0])
    {
        $request = $this->syncFinancialConnectionsDataRequest($fuse_verification, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\SyncFinancialConnectionsDataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\SyncFinancialConnectionsDataResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\SyncFinancialConnectionsDataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\SyncFinancialConnectionsDataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\SyncFinancialConnectionsDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncFinancialConnectionsDataAsync
     *
     * Sync financial connections data
     *
     * @param  string $fuse_verification (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFinancialConnectionsData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncFinancialConnectionsDataAsync($fuse_verification, $body, string $contentType = self::contentTypes['syncFinancialConnectionsData'][0])
    {
        return $this->syncFinancialConnectionsDataAsyncWithHttpInfo($fuse_verification, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncFinancialConnectionsDataAsyncWithHttpInfo
     *
     * Sync financial connections data
     *
     * @param  string $fuse_verification (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFinancialConnectionsData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncFinancialConnectionsDataAsyncWithHttpInfo($fuse_verification, $body, string $contentType = self::contentTypes['syncFinancialConnectionsData'][0])
    {
        $returnType = '\FuseClient\Model\SyncFinancialConnectionsDataResponse';
        $request = $this->syncFinancialConnectionsDataRequest($fuse_verification, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncFinancialConnectionsData'
     *
     * @param  string $fuse_verification (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncFinancialConnectionsData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncFinancialConnectionsDataRequest($fuse_verification, $body, string $contentType = self::contentTypes['syncFinancialConnectionsData'][0])
    {

        // verify the required parameter 'fuse_verification' is set
        if ($fuse_verification === null || (is_array($fuse_verification) && count($fuse_verification) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fuse_verification when calling syncFinancialConnectionsData'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling syncFinancialConnectionsData'
            );
        }


        $resourcePath = '/v1/financial_connections/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($fuse_verification !== null) {
            $headerParams['Fuse-Verification'] = ObjectSerializer::toHeaderValue($fuse_verification);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateConsumerRiskReportCustomization
     *
     * Update consumer risk report customization
     *
     * @param  string $consumer_risk_report_customization_id consumer_risk_report_customization_id (required)
     * @param  \FuseClient\Model\UpdateConsumerRiskReportCustomizationRequest $update_consumer_risk_report_customization_request update_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\UpdateConsumerRiskReportCustomizationResponse
     */
    public function updateConsumerRiskReportCustomization($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['updateConsumerRiskReportCustomization'][0])
    {
        list($response) = $this->updateConsumerRiskReportCustomizationWithHttpInfo($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request, $contentType);
        return $response;
    }

    /**
     * Operation updateConsumerRiskReportCustomizationWithHttpInfo
     *
     * Update consumer risk report customization
     *
     * @param  string $consumer_risk_report_customization_id (required)
     * @param  \FuseClient\Model\UpdateConsumerRiskReportCustomizationRequest $update_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\UpdateConsumerRiskReportCustomizationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConsumerRiskReportCustomizationWithHttpInfo($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['updateConsumerRiskReportCustomization'][0])
    {
        $request = $this->updateConsumerRiskReportCustomizationRequest($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\UpdateConsumerRiskReportCustomizationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\UpdateConsumerRiskReportCustomizationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\UpdateConsumerRiskReportCustomizationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\UpdateConsumerRiskReportCustomizationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\UpdateConsumerRiskReportCustomizationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateConsumerRiskReportCustomizationAsync
     *
     * Update consumer risk report customization
     *
     * @param  string $consumer_risk_report_customization_id (required)
     * @param  \FuseClient\Model\UpdateConsumerRiskReportCustomizationRequest $update_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConsumerRiskReportCustomizationAsync($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['updateConsumerRiskReportCustomization'][0])
    {
        return $this->updateConsumerRiskReportCustomizationAsyncWithHttpInfo($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateConsumerRiskReportCustomizationAsyncWithHttpInfo
     *
     * Update consumer risk report customization
     *
     * @param  string $consumer_risk_report_customization_id (required)
     * @param  \FuseClient\Model\UpdateConsumerRiskReportCustomizationRequest $update_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConsumerRiskReportCustomizationAsyncWithHttpInfo($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['updateConsumerRiskReportCustomization'][0])
    {
        $returnType = '\FuseClient\Model\UpdateConsumerRiskReportCustomizationResponse';
        $request = $this->updateConsumerRiskReportCustomizationRequest($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateConsumerRiskReportCustomization'
     *
     * @param  string $consumer_risk_report_customization_id (required)
     * @param  \FuseClient\Model\UpdateConsumerRiskReportCustomizationRequest $update_consumer_risk_report_customization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConsumerRiskReportCustomization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateConsumerRiskReportCustomizationRequest($consumer_risk_report_customization_id, $update_consumer_risk_report_customization_request = null, string $contentType = self::contentTypes['updateConsumerRiskReportCustomization'][0])
    {

        // verify the required parameter 'consumer_risk_report_customization_id' is set
        if ($consumer_risk_report_customization_id === null || (is_array($consumer_risk_report_customization_id) && count($consumer_risk_report_customization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consumer_risk_report_customization_id when calling updateConsumerRiskReportCustomization'
            );
        }



        $resourcePath = '/v1/risk_report/consumer/customization/{consumer_risk_report_customization_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($consumer_risk_report_customization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consumer_risk_report_customization_id' . '}',
                ObjectSerializer::toPathValue($consumer_risk_report_customization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_consumer_risk_report_customization_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_consumer_risk_report_customization_request));
            } else {
                $httpBody = $update_consumer_risk_report_customization_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1FinancialConnectionsLiabilitiesPost
     *
     * Get liabilities
     *
     * @param  \FuseClient\Model\GetLiabilitiesRequest $get_liabilities_request get_liabilities_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1FinancialConnectionsLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FuseClient\Model\GetLiabilitiesResponse
     */
    public function v1FinancialConnectionsLiabilitiesPost($get_liabilities_request, string $contentType = self::contentTypes['v1FinancialConnectionsLiabilitiesPost'][0])
    {
        list($response) = $this->v1FinancialConnectionsLiabilitiesPostWithHttpInfo($get_liabilities_request, $contentType);
        return $response;
    }

    /**
     * Operation v1FinancialConnectionsLiabilitiesPostWithHttpInfo
     *
     * Get liabilities
     *
     * @param  \FuseClient\Model\GetLiabilitiesRequest $get_liabilities_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1FinancialConnectionsLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \FuseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FuseClient\Model\GetLiabilitiesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1FinancialConnectionsLiabilitiesPostWithHttpInfo($get_liabilities_request, string $contentType = self::contentTypes['v1FinancialConnectionsLiabilitiesPost'][0])
    {
        $request = $this->v1FinancialConnectionsLiabilitiesPostRequest($get_liabilities_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\FuseClient\Model\GetLiabilitiesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\FuseClient\Model\GetLiabilitiesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FuseClient\Model\GetLiabilitiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FuseClient\Model\GetLiabilitiesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FuseClient\Model\GetLiabilitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1FinancialConnectionsLiabilitiesPostAsync
     *
     * Get liabilities
     *
     * @param  \FuseClient\Model\GetLiabilitiesRequest $get_liabilities_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1FinancialConnectionsLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1FinancialConnectionsLiabilitiesPostAsync($get_liabilities_request, string $contentType = self::contentTypes['v1FinancialConnectionsLiabilitiesPost'][0])
    {
        return $this->v1FinancialConnectionsLiabilitiesPostAsyncWithHttpInfo($get_liabilities_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1FinancialConnectionsLiabilitiesPostAsyncWithHttpInfo
     *
     * Get liabilities
     *
     * @param  \FuseClient\Model\GetLiabilitiesRequest $get_liabilities_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1FinancialConnectionsLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1FinancialConnectionsLiabilitiesPostAsyncWithHttpInfo($get_liabilities_request, string $contentType = self::contentTypes['v1FinancialConnectionsLiabilitiesPost'][0])
    {
        $returnType = '\FuseClient\Model\GetLiabilitiesResponse';
        $request = $this->v1FinancialConnectionsLiabilitiesPostRequest($get_liabilities_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1FinancialConnectionsLiabilitiesPost'
     *
     * @param  \FuseClient\Model\GetLiabilitiesRequest $get_liabilities_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1FinancialConnectionsLiabilitiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1FinancialConnectionsLiabilitiesPostRequest($get_liabilities_request, string $contentType = self::contentTypes['v1FinancialConnectionsLiabilitiesPost'][0])
    {

        // verify the required parameter 'get_liabilities_request' is set
        if ($get_liabilities_request === null || (is_array($get_liabilities_request) && count($get_liabilities_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_liabilities_request when calling v1FinancialConnectionsLiabilitiesPost'
            );
        }


        $resourcePath = '/v1/financial_connections/liabilities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_liabilities_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_liabilities_request));
            } else {
                $httpBody = $get_liabilities_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Api-Key');
        if ($apiKey !== null) {
            $headers['Fuse-Api-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fuse-Client-Id');
        if ($apiKey !== null) {
            $headers['Fuse-Client-Id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
