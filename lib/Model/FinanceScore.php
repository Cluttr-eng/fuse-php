<?php
/**
 * FinanceScore
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FuseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fuse
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FuseClient\Model;

use \ArrayAccess;
use \FuseClient\ObjectSerializer;

/**
 * FinanceScore Class Doc Comment
 *
 * @category Class
 * @package  FuseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FinanceScore implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FinanceScore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'value' => 'float',
        'savings_score' => 'float',
        'expense_stability_score' => 'float',
        'activity_age_score' => 'float',
        'income_score' => 'float',
        'loan_payments_score' => 'float',
        'repayments_score' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'value' => null,
        'savings_score' => null,
        'expense_stability_score' => null,
        'activity_age_score' => null,
        'income_score' => null,
        'loan_payments_score' => null,
        'repayments_score' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'value' => false,
		'savings_score' => false,
		'expense_stability_score' => false,
		'activity_age_score' => false,
		'income_score' => false,
		'loan_payments_score' => false,
		'repayments_score' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'value' => 'value',
        'savings_score' => 'savings_score',
        'expense_stability_score' => 'expense_stability_score',
        'activity_age_score' => 'activity_age_score',
        'income_score' => 'income_score',
        'loan_payments_score' => 'loan_payments_score',
        'repayments_score' => 'repayments_score'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'value' => 'setValue',
        'savings_score' => 'setSavingsScore',
        'expense_stability_score' => 'setExpenseStabilityScore',
        'activity_age_score' => 'setActivityAgeScore',
        'income_score' => 'setIncomeScore',
        'loan_payments_score' => 'setLoanPaymentsScore',
        'repayments_score' => 'setRepaymentsScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'value' => 'getValue',
        'savings_score' => 'getSavingsScore',
        'expense_stability_score' => 'getExpenseStabilityScore',
        'activity_age_score' => 'getActivityAgeScore',
        'income_score' => 'getIncomeScore',
        'loan_payments_score' => 'getLoanPaymentsScore',
        'repayments_score' => 'getRepaymentsScore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('savings_score', $data ?? [], null);
        $this->setIfExists('expense_stability_score', $data ?? [], null);
        $this->setIfExists('activity_age_score', $data ?? [], null);
        $this->setIfExists('income_score', $data ?? [], null);
        $this->setIfExists('loan_payments_score', $data ?? [], null);
        $this->setIfExists('repayments_score', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if ($this->container['savings_score'] === null) {
            $invalidProperties[] = "'savings_score' can't be null";
        }
        if ($this->container['expense_stability_score'] === null) {
            $invalidProperties[] = "'expense_stability_score' can't be null";
        }
        if ($this->container['activity_age_score'] === null) {
            $invalidProperties[] = "'activity_age_score' can't be null";
        }
        if ($this->container['income_score'] === null) {
            $invalidProperties[] = "'income_score' can't be null";
        }
        if ($this->container['loan_payments_score'] === null) {
            $invalidProperties[] = "'loan_payments_score' can't be null";
        }
        if ($this->container['repayments_score'] === null) {
            $invalidProperties[] = "'repayments_score' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets value
     *
     * @return float
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float $value The likelihood of a credit default. A higher score implies lower risk. The finance score and all finance score metrics are values between 0 and 1. This value is calculated by the weighted sum of the metrics below.
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets savings_score
     *
     * @return float
     */
    public function getSavingsScore()
    {
        return $this->container['savings_score'];
    }

    /**
     * Sets savings_score
     *
     * @param float $savings_score This quantifies a user's monthly savings habits. A lower score represents minimal savings, while a higher score indicates a user who consistently sets aside a substantial portion of their income.
     *
     * @return self
     */
    public function setSavingsScore($savings_score)
    {
        if (is_null($savings_score)) {
            throw new \InvalidArgumentException('non-nullable savings_score cannot be null');
        }
        $this->container['savings_score'] = $savings_score;

        return $this;
    }

    /**
     * Gets expense_stability_score
     *
     * @return float
     */
    public function getExpenseStabilityScore()
    {
        return $this->container['expense_stability_score'];
    }

    /**
     * Sets expense_stability_score
     *
     * @param float $expense_stability_score This assesses the consistency of a user's monthly spending. A lower score indicates variable monthly expenditure, while a higher score represents consistent spending habits.
     *
     * @return self
     */
    public function setExpenseStabilityScore($expense_stability_score)
    {
        if (is_null($expense_stability_score)) {
            throw new \InvalidArgumentException('non-nullable expense_stability_score cannot be null');
        }
        $this->container['expense_stability_score'] = $expense_stability_score;

        return $this;
    }

    /**
     * Gets activity_age_score
     *
     * @return float
     */
    public function getActivityAgeScore()
    {
        return $this->container['activity_age_score'];
    }

    /**
     * Sets activity_age_score
     *
     * @param float $activity_age_score This measures the regularity of a user's financial activity over a period of time. A lower score suggests limited activity, while a higher score is indicative of regular daily transactions over a long period of time.
     *
     * @return self
     */
    public function setActivityAgeScore($activity_age_score)
    {
        if (is_null($activity_age_score)) {
            throw new \InvalidArgumentException('non-nullable activity_age_score cannot be null');
        }
        $this->container['activity_age_score'] = $activity_age_score;

        return $this;
    }

    /**
     * Gets income_score
     *
     * @return float
     */
    public function getIncomeScore()
    {
        return $this->container['income_score'];
    }

    /**
     * Sets income_score
     *
     * @param float $income_score This evaluates the stability of a user's income. A lower score suggests inconsistent or low income, while a higher score represents high, consistent income.
     *
     * @return self
     */
    public function setIncomeScore($income_score)
    {
        if (is_null($income_score)) {
            throw new \InvalidArgumentException('non-nullable income_score cannot be null');
        }
        $this->container['income_score'] = $income_score;

        return $this;
    }

    /**
     * Gets loan_payments_score
     *
     * @return float
     */
    public function getLoanPaymentsScore()
    {
        return $this->container['loan_payments_score'];
    }

    /**
     * Sets loan_payments_score
     *
     * @param float $loan_payments_score This evaluates a user's loan repayment behaviour. A lower score is assigned to those without loan payments, while a higher score denotes consistent loan payments, such as a mortgage.
     *
     * @return self
     */
    public function setLoanPaymentsScore($loan_payments_score)
    {
        if (is_null($loan_payments_score)) {
            throw new \InvalidArgumentException('non-nullable loan_payments_score cannot be null');
        }
        $this->container['loan_payments_score'] = $loan_payments_score;

        return $this;
    }

    /**
     * Gets repayments_score
     *
     * @return float
     */
    public function getRepaymentsScore()
    {
        return $this->container['repayments_score'];
    }

    /**
     * Sets repayments_score
     *
     * @param float $repayments_score This quantifies a user's ability to repay debts. A lower score corresponds to missed payments, while a higher score signifies consistent debt repayment.
     *
     * @return self
     */
    public function setRepaymentsScore($repayments_score)
    {
        if (is_null($repayments_score)) {
            throw new \InvalidArgumentException('non-nullable repayments_score cannot be null');
        }
        $this->container['repayments_score'] = $repayments_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


