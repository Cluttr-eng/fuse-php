<?php
/**
 * CreateSessionRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fuse
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateSessionRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateSessionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateSessionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supported_financial_institution_aggregators' => '\OpenAPI\Client\Model\Aggregator[]',
        'products' => '\OpenAPI\Client\Model\Product[]',
        'country_codes' => '\OpenAPI\Client\Model\CountryCode[]',
        'entity' => '\OpenAPI\Client\Model\Entity',
        'access_token' => 'string',
        'is_web_view' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'supported_financial_institution_aggregators' => null,
        'products' => null,
        'country_codes' => null,
        'entity' => null,
        'access_token' => null,
        'is_web_view' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'supported_financial_institution_aggregators' => false,
		'products' => false,
		'country_codes' => false,
		'entity' => false,
		'access_token' => false,
		'is_web_view' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supported_financial_institution_aggregators' => 'supported_financial_institution_aggregators',
        'products' => 'products',
        'country_codes' => 'country_codes',
        'entity' => 'entity',
        'access_token' => 'access_token',
        'is_web_view' => 'is_web_view'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supported_financial_institution_aggregators' => 'setSupportedFinancialInstitutionAggregators',
        'products' => 'setProducts',
        'country_codes' => 'setCountryCodes',
        'entity' => 'setEntity',
        'access_token' => 'setAccessToken',
        'is_web_view' => 'setIsWebView'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supported_financial_institution_aggregators' => 'getSupportedFinancialInstitutionAggregators',
        'products' => 'getProducts',
        'country_codes' => 'getCountryCodes',
        'entity' => 'getEntity',
        'access_token' => 'getAccessToken',
        'is_web_view' => 'getIsWebView'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('supported_financial_institution_aggregators', $data ?? [], null);
        $this->setIfExists('products', $data ?? [], null);
        $this->setIfExists('country_codes', $data ?? [], null);
        $this->setIfExists('entity', $data ?? [], null);
        $this->setIfExists('access_token', $data ?? [], null);
        $this->setIfExists('is_web_view', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['supported_financial_institution_aggregators'] === null) {
            $invalidProperties[] = "'supported_financial_institution_aggregators' can't be null";
        }
        if ((count($this->container['supported_financial_institution_aggregators']) < 1)) {
            $invalidProperties[] = "invalid value for 'supported_financial_institution_aggregators', number of items must be greater than or equal to 1.";
        }

        if ($this->container['products'] === null) {
            $invalidProperties[] = "'products' can't be null";
        }
        if ((count($this->container['products']) < 1)) {
            $invalidProperties[] = "invalid value for 'products', number of items must be greater than or equal to 1.";
        }

        if ($this->container['entity'] === null) {
            $invalidProperties[] = "'entity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supported_financial_institution_aggregators
     *
     * @return \OpenAPI\Client\Model\Aggregator[]
     */
    public function getSupportedFinancialInstitutionAggregators()
    {
        return $this->container['supported_financial_institution_aggregators'];
    }

    /**
     * Sets supported_financial_institution_aggregators
     *
     * @param \OpenAPI\Client\Model\Aggregator[] $supported_financial_institution_aggregators supported_financial_institution_aggregators
     *
     * @return self
     */
    public function setSupportedFinancialInstitutionAggregators($supported_financial_institution_aggregators)
    {
        if (is_null($supported_financial_institution_aggregators)) {
            throw new \InvalidArgumentException('non-nullable supported_financial_institution_aggregators cannot be null');
        }


        if ((count($supported_financial_institution_aggregators) < 1)) {
            throw new \InvalidArgumentException('invalid length for $supported_financial_institution_aggregators when calling CreateSessionRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['supported_financial_institution_aggregators'] = $supported_financial_institution_aggregators;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \OpenAPI\Client\Model\Product[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \OpenAPI\Client\Model\Product[] $products List of products that you would like the institutions to support
     *
     * @return self
     */
    public function setProducts($products)
    {
        if (is_null($products)) {
            throw new \InvalidArgumentException('non-nullable products cannot be null');
        }


        if ((count($products) < 1)) {
            throw new \InvalidArgumentException('invalid length for $products when calling CreateSessionRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets country_codes
     *
     * @return \OpenAPI\Client\Model\CountryCode[]|null
     */
    public function getCountryCodes()
    {
        return $this->container['country_codes'];
    }

    /**
     * Sets country_codes
     *
     * @param \OpenAPI\Client\Model\CountryCode[]|null $country_codes List of country codes that you would like the institutions to support
     *
     * @return self
     */
    public function setCountryCodes($country_codes)
    {
        if (is_null($country_codes)) {
            throw new \InvalidArgumentException('non-nullable country_codes cannot be null');
        }
        $this->container['country_codes'] = $country_codes;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return \OpenAPI\Client\Model\Entity
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param \OpenAPI\Client\Model\Entity $entity entity
     *
     * @return self
     */
    public function setEntity($entity)
    {
        if (is_null($entity)) {
            throw new \InvalidArgumentException('non-nullable entity cannot be null');
        }
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string|null $access_token The fuse access token for an existing financial connection. This will perform the process to reconnect an existing disconnected account.
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        if (is_null($access_token)) {
            throw new \InvalidArgumentException('non-nullable access_token cannot be null');
        }
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets is_web_view
     *
     * @return bool|null
     */
    public function getIsWebView()
    {
        return $this->container['is_web_view'];
    }

    /**
     * Sets is_web_view
     *
     * @param bool|null $is_web_view Set to false for web SDKs (e.g., React), and true for mobile SDKs (e.g., React Native, Flutter, iOS, Android).
     *
     * @return self
     */
    public function setIsWebView($is_web_view)
    {
        if (is_null($is_web_view)) {
            throw new \InvalidArgumentException('non-nullable is_web_view cannot be null');
        }
        $this->container['is_web_view'] = $is_web_view;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


