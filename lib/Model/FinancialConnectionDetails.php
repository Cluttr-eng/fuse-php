<?php
/**
 * FinancialConnectionDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FuseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fuse
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FuseClient\Model;

use \ArrayAccess;
use \FuseClient\ObjectSerializer;

/**
 * FinancialConnectionDetails Class Doc Comment
 *
 * @category Class
 * @package  FuseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FinancialConnectionDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FinancialConnectionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'connection_status' => 'string',
        'connection_status_updated_at' => 'string',
        'is_oauth' => 'bool',
        'aggregator' => '\FuseClient\Model\Aggregator',
        'plaid' => '\FuseClient\Model\FinancialConnectionDetailsPlaid',
        'teller' => '\FuseClient\Model\FinancialConnectionDetailsTeller',
        'mx' => '\FuseClient\Model\FinancialConnectionDetailsMx',
        'snaptrade' => '\FuseClient\Model\FinancialConnectionDetailsSnaptrade',
        'flinks' => '\FuseClient\Model\FinancialConnectionDetailsFlinks',
        'mono' => '\FuseClient\Model\FinancialConnectionDetailsMono',
        'truelayer' => '\FuseClient\Model\FinancialConnectionDetailsTruelayer',
        'finverse' => '\FuseClient\Model\FinancialConnectionDetailsFinverse',
        'basiq' => '\FuseClient\Model\FinancialConnectionDetailsBasiq',
        'belvo' => '\FuseClient\Model\FinancialConnectionDetailsBelvo',
        'finicity' => '\FuseClient\Model\FinancialConnectionDetailsFinicity',
        'akoya' => '\FuseClient\Model\FinancialConnectionDetailsAkoya',
        'saltedge' => '\FuseClient\Model\FinancialConnectionDetailsSaltedge'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'connection_status' => null,
        'connection_status_updated_at' => null,
        'is_oauth' => null,
        'aggregator' => null,
        'plaid' => null,
        'teller' => null,
        'mx' => null,
        'snaptrade' => null,
        'flinks' => null,
        'mono' => null,
        'truelayer' => null,
        'finverse' => null,
        'basiq' => null,
        'belvo' => null,
        'finicity' => null,
        'akoya' => null,
        'saltedge' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'connection_status' => false,
		'connection_status_updated_at' => false,
		'is_oauth' => false,
		'aggregator' => false,
		'plaid' => false,
		'teller' => false,
		'mx' => false,
		'snaptrade' => false,
		'flinks' => false,
		'mono' => false,
		'truelayer' => false,
		'finverse' => false,
		'basiq' => false,
		'belvo' => false,
		'finicity' => false,
		'akoya' => false,
		'saltedge' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'connection_status' => 'connection_status',
        'connection_status_updated_at' => 'connection_status_updated_at',
        'is_oauth' => 'is_oauth',
        'aggregator' => 'aggregator',
        'plaid' => 'plaid',
        'teller' => 'teller',
        'mx' => 'mx',
        'snaptrade' => 'snaptrade',
        'flinks' => 'flinks',
        'mono' => 'mono',
        'truelayer' => 'truelayer',
        'finverse' => 'finverse',
        'basiq' => 'basiq',
        'belvo' => 'belvo',
        'finicity' => 'finicity',
        'akoya' => 'akoya',
        'saltedge' => 'saltedge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'connection_status' => 'setConnectionStatus',
        'connection_status_updated_at' => 'setConnectionStatusUpdatedAt',
        'is_oauth' => 'setIsOauth',
        'aggregator' => 'setAggregator',
        'plaid' => 'setPlaid',
        'teller' => 'setTeller',
        'mx' => 'setMx',
        'snaptrade' => 'setSnaptrade',
        'flinks' => 'setFlinks',
        'mono' => 'setMono',
        'truelayer' => 'setTruelayer',
        'finverse' => 'setFinverse',
        'basiq' => 'setBasiq',
        'belvo' => 'setBelvo',
        'finicity' => 'setFinicity',
        'akoya' => 'setAkoya',
        'saltedge' => 'setSaltedge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'connection_status' => 'getConnectionStatus',
        'connection_status_updated_at' => 'getConnectionStatusUpdatedAt',
        'is_oauth' => 'getIsOauth',
        'aggregator' => 'getAggregator',
        'plaid' => 'getPlaid',
        'teller' => 'getTeller',
        'mx' => 'getMx',
        'snaptrade' => 'getSnaptrade',
        'flinks' => 'getFlinks',
        'mono' => 'getMono',
        'truelayer' => 'getTruelayer',
        'finverse' => 'getFinverse',
        'basiq' => 'getBasiq',
        'belvo' => 'getBelvo',
        'finicity' => 'getFinicity',
        'akoya' => 'getAkoya',
        'saltedge' => 'getSaltedge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONNECTION_STATUS_CONNECTED = 'connected';
    public const CONNECTION_STATUS_DISCONNECTED = 'disconnected';
    public const CONNECTION_STATUS_FINISHED = 'finished';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectionStatusAllowableValues()
    {
        return [
            self::CONNECTION_STATUS_CONNECTED,
            self::CONNECTION_STATUS_DISCONNECTED,
            self::CONNECTION_STATUS_FINISHED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('connection_status', $data ?? [], null);
        $this->setIfExists('connection_status_updated_at', $data ?? [], null);
        $this->setIfExists('is_oauth', $data ?? [], null);
        $this->setIfExists('aggregator', $data ?? [], null);
        $this->setIfExists('plaid', $data ?? [], null);
        $this->setIfExists('teller', $data ?? [], null);
        $this->setIfExists('mx', $data ?? [], null);
        $this->setIfExists('snaptrade', $data ?? [], null);
        $this->setIfExists('flinks', $data ?? [], null);
        $this->setIfExists('mono', $data ?? [], null);
        $this->setIfExists('truelayer', $data ?? [], null);
        $this->setIfExists('finverse', $data ?? [], null);
        $this->setIfExists('basiq', $data ?? [], null);
        $this->setIfExists('belvo', $data ?? [], null);
        $this->setIfExists('finicity', $data ?? [], null);
        $this->setIfExists('akoya', $data ?? [], null);
        $this->setIfExists('saltedge', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['connection_status'] === null) {
            $invalidProperties[] = "'connection_status' can't be null";
        }
        $allowedValues = $this->getConnectionStatusAllowableValues();
        if (!is_null($this->container['connection_status']) && !in_array($this->container['connection_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'connection_status', must be one of '%s'",
                $this->container['connection_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['connection_status_updated_at'] === null) {
            $invalidProperties[] = "'connection_status_updated_at' can't be null";
        }
        if ($this->container['is_oauth'] === null) {
            $invalidProperties[] = "'is_oauth' can't be null";
        }
        if ($this->container['aggregator'] === null) {
            $invalidProperties[] = "'aggregator' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The fuse financial connection id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets connection_status
     *
     * @return string
     */
    public function getConnectionStatus()
    {
        return $this->container['connection_status'];
    }

    /**
     * Sets connection_status
     *
     * @param string $connection_status Connection status of the current financial connection
     *
     * @return self
     */
    public function setConnectionStatus($connection_status)
    {
        if (is_null($connection_status)) {
            throw new \InvalidArgumentException('non-nullable connection_status cannot be null');
        }
        $allowedValues = $this->getConnectionStatusAllowableValues();
        if (!in_array($connection_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'connection_status', must be one of '%s'",
                    $connection_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connection_status'] = $connection_status;

        return $this;
    }

    /**
     * Gets connection_status_updated_at
     *
     * @return string
     */
    public function getConnectionStatusUpdatedAt()
    {
        return $this->container['connection_status_updated_at'];
    }

    /**
     * Sets connection_status_updated_at
     *
     * @param string $connection_status_updated_at Last time the connection status was updated in ISO-8601 format.
     *
     * @return self
     */
    public function setConnectionStatusUpdatedAt($connection_status_updated_at)
    {
        if (is_null($connection_status_updated_at)) {
            throw new \InvalidArgumentException('non-nullable connection_status_updated_at cannot be null');
        }
        $this->container['connection_status_updated_at'] = $connection_status_updated_at;

        return $this;
    }

    /**
     * Gets is_oauth
     *
     * @return bool
     */
    public function getIsOauth()
    {
        return $this->container['is_oauth'];
    }

    /**
     * Sets is_oauth
     *
     * @param bool $is_oauth Whether this is an oauth connection
     *
     * @return self
     */
    public function setIsOauth($is_oauth)
    {
        if (is_null($is_oauth)) {
            throw new \InvalidArgumentException('non-nullable is_oauth cannot be null');
        }
        $this->container['is_oauth'] = $is_oauth;

        return $this;
    }

    /**
     * Gets aggregator
     *
     * @return \FuseClient\Model\Aggregator
     */
    public function getAggregator()
    {
        return $this->container['aggregator'];
    }

    /**
     * Sets aggregator
     *
     * @param \FuseClient\Model\Aggregator $aggregator aggregator
     *
     * @return self
     */
    public function setAggregator($aggregator)
    {
        if (is_null($aggregator)) {
            throw new \InvalidArgumentException('non-nullable aggregator cannot be null');
        }
        $this->container['aggregator'] = $aggregator;

        return $this;
    }

    /**
     * Gets plaid
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsPlaid|null
     */
    public function getPlaid()
    {
        return $this->container['plaid'];
    }

    /**
     * Sets plaid
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsPlaid|null $plaid plaid
     *
     * @return self
     */
    public function setPlaid($plaid)
    {
        if (is_null($plaid)) {
            throw new \InvalidArgumentException('non-nullable plaid cannot be null');
        }
        $this->container['plaid'] = $plaid;

        return $this;
    }

    /**
     * Gets teller
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsTeller|null
     */
    public function getTeller()
    {
        return $this->container['teller'];
    }

    /**
     * Sets teller
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsTeller|null $teller teller
     *
     * @return self
     */
    public function setTeller($teller)
    {
        if (is_null($teller)) {
            throw new \InvalidArgumentException('non-nullable teller cannot be null');
        }
        $this->container['teller'] = $teller;

        return $this;
    }

    /**
     * Gets mx
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsMx|null
     */
    public function getMx()
    {
        return $this->container['mx'];
    }

    /**
     * Sets mx
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsMx|null $mx mx
     *
     * @return self
     */
    public function setMx($mx)
    {
        if (is_null($mx)) {
            throw new \InvalidArgumentException('non-nullable mx cannot be null');
        }
        $this->container['mx'] = $mx;

        return $this;
    }

    /**
     * Gets snaptrade
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsSnaptrade|null
     */
    public function getSnaptrade()
    {
        return $this->container['snaptrade'];
    }

    /**
     * Sets snaptrade
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsSnaptrade|null $snaptrade snaptrade
     *
     * @return self
     */
    public function setSnaptrade($snaptrade)
    {
        if (is_null($snaptrade)) {
            throw new \InvalidArgumentException('non-nullable snaptrade cannot be null');
        }
        $this->container['snaptrade'] = $snaptrade;

        return $this;
    }

    /**
     * Gets flinks
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsFlinks|null
     */
    public function getFlinks()
    {
        return $this->container['flinks'];
    }

    /**
     * Sets flinks
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsFlinks|null $flinks flinks
     *
     * @return self
     */
    public function setFlinks($flinks)
    {
        if (is_null($flinks)) {
            throw new \InvalidArgumentException('non-nullable flinks cannot be null');
        }
        $this->container['flinks'] = $flinks;

        return $this;
    }

    /**
     * Gets mono
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsMono|null
     */
    public function getMono()
    {
        return $this->container['mono'];
    }

    /**
     * Sets mono
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsMono|null $mono mono
     *
     * @return self
     */
    public function setMono($mono)
    {
        if (is_null($mono)) {
            throw new \InvalidArgumentException('non-nullable mono cannot be null');
        }
        $this->container['mono'] = $mono;

        return $this;
    }

    /**
     * Gets truelayer
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsTruelayer|null
     */
    public function getTruelayer()
    {
        return $this->container['truelayer'];
    }

    /**
     * Sets truelayer
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsTruelayer|null $truelayer truelayer
     *
     * @return self
     */
    public function setTruelayer($truelayer)
    {
        if (is_null($truelayer)) {
            throw new \InvalidArgumentException('non-nullable truelayer cannot be null');
        }
        $this->container['truelayer'] = $truelayer;

        return $this;
    }

    /**
     * Gets finverse
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsFinverse|null
     */
    public function getFinverse()
    {
        return $this->container['finverse'];
    }

    /**
     * Sets finverse
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsFinverse|null $finverse finverse
     *
     * @return self
     */
    public function setFinverse($finverse)
    {
        if (is_null($finverse)) {
            throw new \InvalidArgumentException('non-nullable finverse cannot be null');
        }
        $this->container['finverse'] = $finverse;

        return $this;
    }

    /**
     * Gets basiq
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsBasiq|null
     */
    public function getBasiq()
    {
        return $this->container['basiq'];
    }

    /**
     * Sets basiq
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsBasiq|null $basiq basiq
     *
     * @return self
     */
    public function setBasiq($basiq)
    {
        if (is_null($basiq)) {
            throw new \InvalidArgumentException('non-nullable basiq cannot be null');
        }
        $this->container['basiq'] = $basiq;

        return $this;
    }

    /**
     * Gets belvo
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsBelvo|null
     */
    public function getBelvo()
    {
        return $this->container['belvo'];
    }

    /**
     * Sets belvo
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsBelvo|null $belvo belvo
     *
     * @return self
     */
    public function setBelvo($belvo)
    {
        if (is_null($belvo)) {
            throw new \InvalidArgumentException('non-nullable belvo cannot be null');
        }
        $this->container['belvo'] = $belvo;

        return $this;
    }

    /**
     * Gets finicity
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsFinicity|null
     */
    public function getFinicity()
    {
        return $this->container['finicity'];
    }

    /**
     * Sets finicity
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsFinicity|null $finicity finicity
     *
     * @return self
     */
    public function setFinicity($finicity)
    {
        if (is_null($finicity)) {
            throw new \InvalidArgumentException('non-nullable finicity cannot be null');
        }
        $this->container['finicity'] = $finicity;

        return $this;
    }

    /**
     * Gets akoya
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsAkoya|null
     */
    public function getAkoya()
    {
        return $this->container['akoya'];
    }

    /**
     * Sets akoya
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsAkoya|null $akoya akoya
     *
     * @return self
     */
    public function setAkoya($akoya)
    {
        if (is_null($akoya)) {
            throw new \InvalidArgumentException('non-nullable akoya cannot be null');
        }
        $this->container['akoya'] = $akoya;

        return $this;
    }

    /**
     * Gets saltedge
     *
     * @return \FuseClient\Model\FinancialConnectionDetailsSaltedge|null
     */
    public function getSaltedge()
    {
        return $this->container['saltedge'];
    }

    /**
     * Sets saltedge
     *
     * @param \FuseClient\Model\FinancialConnectionDetailsSaltedge|null $saltedge saltedge
     *
     * @return self
     */
    public function setSaltedge($saltedge)
    {
        if (is_null($saltedge)) {
            throw new \InvalidArgumentException('non-nullable saltedge cannot be null');
        }
        $this->container['saltedge'] = $saltedge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


