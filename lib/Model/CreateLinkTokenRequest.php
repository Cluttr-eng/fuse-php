<?php
/**
 * CreateLinkTokenRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  FuseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fuse
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FuseClient\Model;

use \ArrayAccess;
use \FuseClient\ObjectSerializer;

/**
 * CreateLinkTokenRequest Class Doc Comment
 *
 * @category Class
 * @package  FuseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateLinkTokenRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateLinkTokenRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'institution_id' => 'string',
        'entity' => '\FuseClient\Model\Entity',
        'client_name' => 'string',
        'session_client_secret' => 'string',
        'webhook_url' => 'string',
        'mx' => '\FuseClient\Model\CreateLinkTokenRequestMx',
        'plaid' => '\FuseClient\Model\CreateLinkTokenRequestPlaid',
        'teller' => '\FuseClient\Model\CreateLinkTokenRequestTeller',
        'snaptrade' => '\FuseClient\Model\CreateLinkTokenRequestSnaptrade'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'institution_id' => null,
        'entity' => null,
        'client_name' => null,
        'session_client_secret' => null,
        'webhook_url' => null,
        'mx' => null,
        'plaid' => null,
        'teller' => null,
        'snaptrade' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'institution_id' => false,
		'entity' => false,
		'client_name' => false,
		'session_client_secret' => false,
		'webhook_url' => false,
		'mx' => false,
		'plaid' => false,
		'teller' => false,
		'snaptrade' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'institution_id' => 'institution_id',
        'entity' => 'entity',
        'client_name' => 'client_name',
        'session_client_secret' => 'session_client_secret',
        'webhook_url' => 'webhook_url',
        'mx' => 'mx',
        'plaid' => 'plaid',
        'teller' => 'teller',
        'snaptrade' => 'snaptrade'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'institution_id' => 'setInstitutionId',
        'entity' => 'setEntity',
        'client_name' => 'setClientName',
        'session_client_secret' => 'setSessionClientSecret',
        'webhook_url' => 'setWebhookUrl',
        'mx' => 'setMx',
        'plaid' => 'setPlaid',
        'teller' => 'setTeller',
        'snaptrade' => 'setSnaptrade'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'institution_id' => 'getInstitutionId',
        'entity' => 'getEntity',
        'client_name' => 'getClientName',
        'session_client_secret' => 'getSessionClientSecret',
        'webhook_url' => 'getWebhookUrl',
        'mx' => 'getMx',
        'plaid' => 'getPlaid',
        'teller' => 'getTeller',
        'snaptrade' => 'getSnaptrade'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('institution_id', $data ?? [], null);
        $this->setIfExists('entity', $data ?? [], null);
        $this->setIfExists('client_name', $data ?? [], null);
        $this->setIfExists('session_client_secret', $data ?? [], null);
        $this->setIfExists('webhook_url', $data ?? [], null);
        $this->setIfExists('mx', $data ?? [], null);
        $this->setIfExists('plaid', $data ?? [], null);
        $this->setIfExists('teller', $data ?? [], null);
        $this->setIfExists('snaptrade', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['institution_id'] === null) {
            $invalidProperties[] = "'institution_id' can't be null";
        }
        if ($this->container['entity'] === null) {
            $invalidProperties[] = "'entity' can't be null";
        }
        if ($this->container['client_name'] === null) {
            $invalidProperties[] = "'client_name' can't be null";
        }
        if ($this->container['session_client_secret'] === null) {
            $invalidProperties[] = "'session_client_secret' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id An id that is unique for an institution.
     *
     * @return self
     */
    public function setInstitutionId($institution_id)
    {
        if (is_null($institution_id)) {
            throw new \InvalidArgumentException('non-nullable institution_id cannot be null');
        }
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return \FuseClient\Model\Entity
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param \FuseClient\Model\Entity $entity entity
     *
     * @return self
     */
    public function setEntity($entity)
    {
        if (is_null($entity)) {
            throw new \InvalidArgumentException('non-nullable entity cannot be null');
        }
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string $client_name The name of your application. This is what will be displayed to users.
     *
     * @return self
     */
    public function setClientName($client_name)
    {
        if (is_null($client_name)) {
            throw new \InvalidArgumentException('non-nullable client_name cannot be null');
        }
        $this->container['client_name'] = $client_name;

        return $this;
    }

    /**
     * Gets session_client_secret
     *
     * @return string
     */
    public function getSessionClientSecret()
    {
        return $this->container['session_client_secret'];
    }

    /**
     * Sets session_client_secret
     *
     * @param string $session_client_secret The session client secret created from the 'Create session client secret' endpoint
     *
     * @return self
     */
    public function setSessionClientSecret($session_client_secret)
    {
        if (is_null($session_client_secret)) {
            throw new \InvalidArgumentException('non-nullable session_client_secret cannot be null');
        }
        $this->container['session_client_secret'] = $session_client_secret;

        return $this;
    }

    /**
     * Gets webhook_url
     *
     * @return string|null
     */
    public function getWebhookUrl()
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string|null $webhook_url This field allows you to set a unique webhook URL for each individual entity. By specifying an entity-specific webhook URL, you can receive and process data events for each entity separately. If this field is left empty, the organization-wide webhook URL set in the sandbox/production environment will be used as the default for all entities.
     *
     * @return self
     */
    public function setWebhookUrl($webhook_url)
    {
        if (is_null($webhook_url)) {
            throw new \InvalidArgumentException('non-nullable webhook_url cannot be null');
        }
        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }

    /**
     * Gets mx
     *
     * @return \FuseClient\Model\CreateLinkTokenRequestMx|null
     */
    public function getMx()
    {
        return $this->container['mx'];
    }

    /**
     * Sets mx
     *
     * @param \FuseClient\Model\CreateLinkTokenRequestMx|null $mx mx
     *
     * @return self
     */
    public function setMx($mx)
    {
        if (is_null($mx)) {
            throw new \InvalidArgumentException('non-nullable mx cannot be null');
        }
        $this->container['mx'] = $mx;

        return $this;
    }

    /**
     * Gets plaid
     *
     * @return \FuseClient\Model\CreateLinkTokenRequestPlaid|null
     */
    public function getPlaid()
    {
        return $this->container['plaid'];
    }

    /**
     * Sets plaid
     *
     * @param \FuseClient\Model\CreateLinkTokenRequestPlaid|null $plaid plaid
     *
     * @return self
     */
    public function setPlaid($plaid)
    {
        if (is_null($plaid)) {
            throw new \InvalidArgumentException('non-nullable plaid cannot be null');
        }
        $this->container['plaid'] = $plaid;

        return $this;
    }

    /**
     * Gets teller
     *
     * @return \FuseClient\Model\CreateLinkTokenRequestTeller|null
     */
    public function getTeller()
    {
        return $this->container['teller'];
    }

    /**
     * Sets teller
     *
     * @param \FuseClient\Model\CreateLinkTokenRequestTeller|null $teller teller
     *
     * @return self
     */
    public function setTeller($teller)
    {
        if (is_null($teller)) {
            throw new \InvalidArgumentException('non-nullable teller cannot be null');
        }
        $this->container['teller'] = $teller;

        return $this;
    }

    /**
     * Gets snaptrade
     *
     * @return \FuseClient\Model\CreateLinkTokenRequestSnaptrade|null
     */
    public function getSnaptrade()
    {
        return $this->container['snaptrade'];
    }

    /**
     * Sets snaptrade
     *
     * @param \FuseClient\Model\CreateLinkTokenRequestSnaptrade|null $snaptrade snaptrade
     *
     * @return self
     */
    public function setSnaptrade($snaptrade)
    {
        if (is_null($snaptrade)) {
            throw new \InvalidArgumentException('non-nullable snaptrade cannot be null');
        }
        $this->container['snaptrade'] = $snaptrade;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


